[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"/articles/simsurv.html","id":"proportional-hazards-random-generation","dir":"Articles","previous_headings":"","what":"Proportional hazards random generation","title":"Simulating survival data under the YP model","text":"","code":"# generating the data set: simdata <- rsurv(   ~ trt + age, covariates = covariates,   baseline = \"weibull\",   gamma = gamma,   psi = c(2, -1),   phi = c(2, -1),   max_fu = 5 )  ph <- phpe(Surv(time, status)~trt+age, data = simdata, n_int = 10, init = 0) po <- pope(Surv(time, status)~trt+age, data = simdata, n_int = 10, init = 0) yp <- yppe(Surv(time, status)~trt+age, data = simdata, n_int = 10, init = 0) anova(ph, po, yp) #>  #> Model 1 ( ph ):  Surv(time, status) ~ trt + age  #> Model 2 ( po ):  Surv(time, status) ~ trt + age  #> Model 3 ( yp ):  Surv(time, status) ~ trt + age  #> ---  #>           loglik      LR df Pr(>Chi)    #> Model 1: 86.4137  2.9644  2 0.227142    #> Model 2: 83.0445  9.7028  2 0.007818 ** #> Model 3: 87.8959       -  -        -    #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"/articles/simsurv.html","id":"proportional-odds-random-generation","dir":"Articles","previous_headings":"","what":"Proportional odds random generation","title":"Simulating survival data under the YP model","text":"","code":"# generating the data set: simdata <- rsurv(   ~ trt + age, covariates = covariates,   baseline = \"weibull\",   gamma = gamma,   psi = c(2, -1),   phi = c(0, 0),   max_fu = 5 )  ph <- phpe(Surv(time, status)~trt+age, data = simdata, n_int = 10, init = 0) po <- pope(Surv(time, status)~trt+age, data = simdata, n_int = 10, init = 0) yp <- yppe(Surv(time, status)~trt+age, data = simdata, n_int = 10, init = 0) anova(ph, po, yp) #>  #> Model 1 ( ph ):  Surv(time, status) ~ trt + age  #> Model 2 ( po ):  Surv(time, status) ~ trt + age  #> Model 3 ( yp ):  Surv(time, status) ~ trt + age  #> ---  #>           loglik      LR df  Pr(>Chi)     #> Model 1: 50.3942 20.8424  2 2.979e-05 *** #> Model 2: 60.2838  1.0631  2    0.5877     #> Model 3: 60.8154       -  -         -     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"/articles/simsurv.html","id":"yang-and-prentice-random-generation","dir":"Articles","previous_headings":"","what":"Yang and Prentice random generation","title":"Simulating survival data under the YP model","text":"","code":"# generating the data set: simdata <- rsurv(   ~ trt + age, covariates = covariates,   baseline = \"weibull\",   gamma = gamma,   psi = c(2, -1),   phi = c(-1, -1),   max_fu = 5 )  ph <- phpe(Surv(time, status)~trt+age, data = simdata, n_int = 10, init = 0) po <- pope(Surv(time, status)~trt+age, data = simdata, n_int = 10, init = 0) yp <- yppe(Surv(time, status)~trt+age, data = simdata, n_int = 10, init = 0) anova(ph, po, yp) #>  #> Model 1 ( ph ):  Surv(time, status) ~ trt + age  #> Model 2 ( po ):  Surv(time, status) ~ trt + age  #> Model 3 ( yp ):  Surv(time, status) ~ trt + age  #> ---  #>          loglik     LR df  Pr(>Chi)     #> Model 1: 68.058 17.534  2 0.0001558 *** #> Model 2: 69.149 15.351  2 0.0004640 *** #> Model 3: 76.825      -  -         -     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabio Demarqui. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Demarqui F (2022). YPPE: Yang Prentice Model Piecewise Exponential Baseline Distribution. R package version 1.1.0, https://fndemarqui.github.io/YPPE/.","code":"@Manual{,   title = {YPPE: Yang and Prentice Model with Piecewise Exponential Baseline Distribution},   author = {Fabio Demarqui},   year = {2022},   note = {R package version 1.1.0},   url = {https://fndemarqui.github.io/YPPE/}, }"},{"path":"/index.html","id":"yppe","dir":"","previous_headings":"","what":"Yang and Prentice Model with Piecewise Exponential Baseline Distribution","title":"Yang and Prentice Model with Piecewise Exponential Baseline Distribution","text":"R package YPPE provides semiparametric modeling lifetime data crossing survival curves via Yang Prentice model piecewise exponential baseline distribution. Details model can found Demarqui Mayrink (2019) <doi.org/10.1214/20-BJPS471>. Model fitting carried via likelihood-based Bayesian approaches. package also provides point interval estimation crossing survival times.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Yang and Prentice Model with Piecewise Exponential Baseline Distribution","text":"can install released version YPPE CRAN : development version GitHub :","code":"install.packages(\"YPPE\") install.packages(\"remotes\") remotes::install_github(\"fndemarqui/YPPE\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Yang and Prentice Model with Piecewise Exponential Baseline Distribution","text":"basic example shows solve common problem:","code":"library(YPPE) #> Loading required package: survival  data(gastric)  # MLE approach: mle <- yppe(Surv(time, status)~trt, data=gastric,              approach = \"mle\", init = 0, n_int = 10) summary(mle) #> Call: #> yppe(formula = Surv(time, status) ~ trt, data = gastric, n_int = 10,  #>     approach = \"mle\", init = 0) #>  #> Short-term coefficients: #>     Estimate  StdErr z.value  p.value    #> trt  1.77113 0.61843  2.8639 0.004185 ** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Long-term coefficients: #>     Estimate   StdErr z.value   p.value     #> trt -0.98230  0.29576 -3.3213 0.0008961 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ---  #> loglik = 6.751216   AIC = 10.49757  # Bayesian approach: bayes <- yppe(Surv(time, status)~trt, data=gastric,                approach = \"bayes\", n_int = 10,                refresh = FALSE)  summary(bayes) #> Call: #> yppe(formula = Surv(time, status) ~ trt, data = gastric, n_int = 10,  #>     approach = \"bayes\", refresh = FALSE) #>  #> Short-term coefficients: #>     mean se_mean    sd  2.5% 25%   50%   75% 97.5%    n_eff Rhat #> trt 1.84   0.016 0.621 0.739 1.4 1.804 2.248 3.141 1591.165    1 #>  #> Long-term coefficients: #>       mean se_mean    sd  2.5%    25%    50%    75%  97.5%    n_eff Rhat #> trt -0.979   0.006 0.304 -1.53 -1.186 -0.991 -0.791 -0.349 2267.735    1 #>  #> ---  #> Inference for Stan model: yppe. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000."},{"path":"/reference/AIC.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"Akaike information criterion — AIC.yppe","title":"Akaike information criterion — AIC.yppe","text":"Akaike information criterion","code":""},{"path":"/reference/AIC.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Akaike information criterion — AIC.yppe","text":"","code":"# S3 method for yppe AIC(object, ..., k = 2)"},{"path":"/reference/AIC.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Akaike information criterion — AIC.yppe","text":"object object class yppe. ... arguments passed methods. k numeric, penalty per parameter used; default k = 2 classical AIC.","code":""},{"path":"/reference/AIC.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Akaike information criterion — AIC.yppe","text":"Akaike information criterion","code":""},{"path":"/reference/YPPE-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'YPPE' package. — YPPE-package","title":"The 'YPPE' package. — YPPE-package","text":"Semiparametric modeling lifetime data crossing survival curves via Yang Prentice model piecewise exponential baseline distribution. Details model can found (Demarqui Mayrink 2021)  <doi.org/10.1214/20-BJPS471>. Model fitting carried via likelihood-based Bayesian approaches. package also provides point interval estimation crossing survival times.","code":""},{"path":"/reference/YPPE-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The 'YPPE' package. — YPPE-package","text":"Demarqui FN, Mayrink VD (2021). “Yang Prentice model piecewise exponential baseline distribution modeling lifetime data crossing survival curves.” Brazilian Journal Probability Statistics, 35(1), 172 -- 186. doi:10.1214/20-BJPS471 . Yang S, Prentice RL (2005). “Semiparametric analysis short-term long-term hazard ratios two-sample survival data.” Biometrika, 92(1), 1-17. Stan Development Team (2019). RStan: R interface Stan. R package version 2.19.2. https://mc-stan.org","code":""},{"path":"/reference/anova.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"anova method for yppe models — anova.yppe","title":"anova method for yppe models — anova.yppe","text":"Compute analysis variance (deviance) tables one fitted model objects.","code":""},{"path":"/reference/anova.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"anova method for yppe models — anova.yppe","text":"","code":"# S3 method for yppe anova(...)"},{"path":"/reference/anova.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"anova method for yppe models — anova.yppe","text":"... arguments passed methods.","code":""},{"path":"/reference/anova.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"anova method for yppe models — anova.yppe","text":"list containing estimated survival probabilities.","code":""},{"path":"/reference/coef.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimated regression coefficients — coef.yppe","title":"Estimated regression coefficients — coef.yppe","text":"function returns estimated regression coefficients maximum likelihood estimation approach used model fitting.","code":""},{"path":"/reference/coef.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimated regression coefficients — coef.yppe","text":"","code":"# S3 method for yppe coef(object, ...)"},{"path":"/reference/coef.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimated regression coefficients — coef.yppe","text":"object object class yppe. ... arguments passed methods.","code":""},{"path":"/reference/coef.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimated regression coefficients — coef.yppe","text":"estimated regression coefficients.","code":""},{"path":"/reference/coef.yppe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimated regression coefficients — coef.yppe","text":"","code":"if (FALSE) { fit <- yppe(Surv(time, status)~arm, data=ipass, init = 0) coef(fit) }"},{"path":"/reference/confint.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence intervals for the regression coefficients — confint.yppe","title":"Confidence intervals for the regression coefficients — confint.yppe","text":"Confidence intervals regression coefficients","code":""},{"path":"/reference/confint.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence intervals for the regression coefficients — confint.yppe","text":"","code":"# S3 method for yppe confint(object, parm = NULL, level = 0.95, ...)"},{"path":"/reference/confint.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence intervals for the regression coefficients — confint.yppe","text":"object object class yppe. parm specification parameters given confidence intervals, either vector numbers vector names. missing, parameters considered. level confidence level required. ... arguments passed methods.","code":""},{"path":"/reference/confint.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence intervals for the regression coefficients — confint.yppe","text":"100(1-alpha) confidence intervals regression coefficients.","code":""},{"path":"/reference/crossTime-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the crossing survival times — crossTime.yppe","title":"Computes the crossing survival times — crossTime.yppe","text":"Computes crossing survival times","code":""},{"path":"/reference/crossTime-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the crossing survival times — crossTime.yppe","text":"","code":"# S3 method for yppe crossTime(object, newdata1, newdata2, conf.level = 0.95, nboot = 1000, ...)"},{"path":"/reference/crossTime-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the crossing survival times — crossTime.yppe","text":"object object class yppe newdata1 data frame containing first set explanatory variables newdata2 data frame containing second set explanatory variables conf.level level confidence/credible intervals nboot number bootstrap samples (default nboot=1000); ignored approach=\"bayes\". ... arguments passed methods.","code":""},{"path":"/reference/crossTime-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the crossing survival times — crossTime.yppe","text":"crossing survival time","code":""},{"path":"/reference/crossTime-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes the crossing survival times — crossTime.yppe","text":"","code":"# \\donttest{ # ML approach: library(YPPE) mle <- yppe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"mle\", init = 0) summary(mle) #> Call: #> yppe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"mle\", init = 0) #>  #> Short-term coefficients: #>     Estimate  StdErr z.value   p.value     #> arm  1.04164 0.16656  6.2539 4.004e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Long-term coefficients: #>      Estimate    StdErr z.value   p.value     #> arm -1.238455  0.084558 -14.646 < 2.2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> ---  #> loglik = 178.3117   AIC = -332.6235  newdata1 <- data.frame(arm=0) newdata2 <- data.frame(arm=1) tcross <- crossTime(mle, newdata1, newdata2, nboot = 10) tcross #>       Est. 2.5% 97.5% #> 1 5.883346   NA    NA ekm <- survfit(Surv(time, status)~arm, data=ipass) newdata <- data.frame(arm=0:1) St <- survfit(mle, newdata) plot(ekm, col=1:2) with(St, lines(time, surv[[1]])) with(St, lines(time, surv[[2]], col=2)) abline(v=tcross, col=\"blue\")   # Bayesian approach: bayes <- yppe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"bayes\", chains=1, iter=10) #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.007527 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 75.27 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: No variance estimation is #> Chain 1:          performed for num_warmup < 20 #> Chain 1:  #> Chain 1: Iteration: 1 / 10 [ 10%]  (Warmup) #> Chain 1: Iteration: 2 / 10 [ 20%]  (Warmup) #> Chain 1: Iteration: 3 / 10 [ 30%]  (Warmup) #> Chain 1: Iteration: 4 / 10 [ 40%]  (Warmup) #> Chain 1: Iteration: 5 / 10 [ 50%]  (Warmup) #> Chain 1: Iteration: 6 / 10 [ 60%]  (Sampling) #> Chain 1: Iteration: 7 / 10 [ 70%]  (Sampling) #> Chain 1: Iteration: 8 / 10 [ 80%]  (Sampling) #> Chain 1: Iteration: 9 / 10 [ 90%]  (Sampling) #> Chain 1: Iteration: 10 / 10 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.303152 seconds (Warm-up) #> Chain 1:                0.153907 seconds (Sampling) #> Chain 1:                0.457059 seconds (Total) #> Chain 1:  #> Warning: There were 3 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: There were 1 chains where the estimated Bayesian Fraction of Missing Information was low. See #> https://mc-stan.org/misc/warnings.html#bfmi-low #> Warning: Examine the pairs() plot to diagnose sampling problems summary(bayes) #> Call: #> yppe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"bayes\", chains = 1, iter = 10) #>  #> Short-term coefficients: #>      mean se_mean    sd  2.5%   25%   50%   75% 97.5% n_eff Rhat #> arm 1.118   0.075 0.141 0.898 1.181 1.181 1.181 1.181 3.495    1 #>  #> Long-term coefficients: #>       mean se_mean    sd   2.5%    25%    50%    75%  97.5% n_eff Rhat #> arm -0.917   0.061 0.114 -1.096 -0.866 -0.866 -0.866 -0.866 3.495    1 #>  #> ---  #> Inference for Stan model: yppe. #> 1 chains, each with iter=10; warmup=5; thin=1;  #> post-warmup draws per chain=5, total post-warmup draws=5. #>  newdata1 <- data.frame(arm=0) newdata2 <- data.frame(arm=1) tcross <- crossTime(bayes, newdata1, newdata2) tcross #>       Est.     2.5%    97.5% #> 1 7.507928 7.197921 7.596501 ekm <- survfit(Surv(time, status)~arm, data=ipass) newdata <- data.frame(arm=0:1) St <- survfit(bayes, newdata) plot(ekm, col=1:2) with(St, lines(time, surv[[1]])) with(St, lines(time, surv[[2]], col=2)) abline(v=tcross, col=\"blue\")  # }"},{"path":"/reference/crossTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method crossTime — crossTime","title":"Generic S3 method crossTime — crossTime","text":"Generic S3 method crossTime","code":""},{"path":"/reference/crossTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method crossTime — crossTime","text":"","code":"crossTime(object, ...)"},{"path":"/reference/crossTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method crossTime — crossTime","text":"object fitted model object ... arguments passed methods.","code":""},{"path":"/reference/crossTime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic S3 method crossTime — crossTime","text":"crossing survival time","code":""},{"path":"/reference/gastric.html","id":null,"dir":"Reference","previous_headings":"","what":"Gastric cancer data set — gastric","title":"Gastric cancer data set — gastric","text":"Data set clinical trial conducted Gastrointestinal Tumor Study Group (GTSG) 1982. data set refers survival times patients locally nonresectable gastric cancer. Patients either treated chemotherapy combined radiation chemotherapy alone.","code":""},{"path":"/reference/gastric.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gastric cancer data set — gastric","text":"data frame 90 rows 3 variables: time: survival times (days) status: failure indicator (1 - failure; 0 - otherwise) trt: treatments (1 - chemotherapy + radiation; 0 - chemotherapy alone)","code":""},{"path":"/reference/gastric.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gastric cancer data set — gastric","text":"Gastrointestinal Tumor Study Group. (1982) Comparison Combination Chemotherapy Combined Modality Therapy Locally Advanced Gastric Carcinoma. Cancer 49:1771-7.","code":""},{"path":"/reference/gastric.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gastric cancer data set — gastric","text":"Fabio N. Demarqui fndemarqui@est.ufmg.br","code":""},{"path":"/reference/ipass.html","id":null,"dir":"Reference","previous_headings":"","what":"IRESSA Pan-Asia Study (IPASS) data set — ipass","title":"IRESSA Pan-Asia Study (IPASS) data set — ipass","text":"Reconstructed IPASS clinical trial data reported Argyropoulos Unruh (2015). Although reconstructed, data set preserves features exhibited references full access observations clinical trial. data base related period March 2006 April 2008. main purpose study compare drug gefitinib carboplatin/paclitaxel doublet chemotherapy first line treatment, terms progression free survival (months), applied selected non-small-cell lung cancer (NSCLC) patients.","code":""},{"path":"/reference/ipass.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"IRESSA Pan-Asia Study (IPASS) data set — ipass","text":"data frame 1217 rows 3 variables: time: progression free survival (months) status: failure indicator (1 - failure; 0 - otherwise) arm: (1 - gefitinib; 0 - carboplatin/paclitaxel doublet chemotherapy)","code":""},{"path":"/reference/ipass.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"IRESSA Pan-Asia Study (IPASS) data set — ipass","text":"Argyropoulos, C. Unruh, M. L. (2015). Analysis time event outcomes randomized controlled trials generalized additive models. PLOS One 10, 1-33.","code":""},{"path":"/reference/ipass.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"IRESSA Pan-Asia Study (IPASS) data set — ipass","text":"Fabio N. Demarqui fndemarqui@est.ufmg.br","code":""},{"path":"/reference/logLik.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Log-Likelihood — logLik.yppe","title":"Extract Log-Likelihood — logLik.yppe","text":"Extract Log-Likelihood","code":""},{"path":"/reference/logLik.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Log-Likelihood — logLik.yppe","text":"","code":"# S3 method for yppe logLik(object, ...)"},{"path":"/reference/logLik.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Log-Likelihood — logLik.yppe","text":"object object class yppe. ... arguments passed methods.","code":""},{"path":"/reference/logLik.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Log-Likelihood — logLik.yppe","text":"log-likelihood associated fitted model.","code":""},{"path":"/reference/model.matrix.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"Model.matrix method for yppe models — model.matrix.yppe","title":"Model.matrix method for yppe models — model.matrix.yppe","text":"Reconstruct model matrix (matrices alternative formulation YP model used) yppe model.","code":""},{"path":"/reference/model.matrix.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model.matrix method for yppe models — model.matrix.yppe","text":"","code":"# S3 method for yppe model.matrix(object, ...)"},{"path":"/reference/model.matrix.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model.matrix method for yppe models — model.matrix.yppe","text":"object object class yppe. ... arguments passed methods.","code":""},{"path":"/reference/model.matrix.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model.matrix method for yppe models — model.matrix.yppe","text":"model matrix (matrices) fit.","code":""},{"path":"/reference/model.matrix.yppe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model.matrix method for yppe models — model.matrix.yppe","text":"","code":"if (FALSE) { fit <- yppe(Surv(time, status)~arm, data=ipass) model.matrix(fit) }"},{"path":"/reference/phpe.html","id":null,"dir":"Reference","previous_headings":"","what":"phpe: Fit Proportional Hazards Regression Model with Piecewise Exponential baseline distribution. — phpe","title":"phpe: Fit Proportional Hazards Regression Model with Piecewise Exponential baseline distribution. — phpe","text":"phpe: Fit Proportional Hazards Regression Model Piecewise Exponential baseline distribution.","code":""},{"path":"/reference/phpe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"phpe: Fit Proportional Hazards Regression Model with Piecewise Exponential baseline distribution. — phpe","text":"","code":"phpe(   formula,   data,   n_int = NULL,   rho = NULL,   tau = NULL,   hessian = TRUE,   approach = c(\"mle\", \"bayes\"),   hyper_parms = list(h1_gamma = 0, h2_gamma = 4, mu_beta = 0, sigma_beta = 4),   ... )"},{"path":"/reference/phpe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"phpe: Fit Proportional Hazards Regression Model with Piecewise Exponential baseline distribution. — phpe","text":"formula object class \"formula\" (one can coerced class): symbolic description model fitted. data optional data frame, list environment (object coercible .data.frame data frame) containing variables model. found data, variables taken environment(formula), typically environment phpe called. n_int number intervals PE distribution. NULL, default value (square root n) used. rho time grid PE distribution. NULL, function timeGrid used compute rho. tau maximum time follow-. NULL, tau = max(time), time vector observed survival times. hessian logical; TRUE (default), hessian matrix returned approach=\"mle\". approach approach used fit model (mle: maximum likelihood; bayes: Bayesian approach). hyper_parms list containing hyper-parameters prior distributions (approach = \"bayes\"). specified, default values used. ... Arguments passed either `rstan::optimizing` `rstan::sampling` .","code":""},{"path":"/reference/phpe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"phpe: Fit Proportional Hazards Regression Model with Piecewise Exponential baseline distribution. — phpe","text":"phpe returns object class \"phpe\" containing fitted model.","code":""},{"path":"/reference/phpe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"phpe: Fit Proportional Hazards Regression Model with Piecewise Exponential baseline distribution. — phpe","text":"","code":"# \\donttest{ # ML approach: library(YPPE) mle <- phpe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"mle\") summary(mle) #> Call: #> phpe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"mle\") #>  #> Proportional hazards coefficients: #>     Estimate   StdErr z.value   p.value     #> arm -0.31088  0.06601 -4.7095 2.483e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> ---  #> loglik = 127.1288   AIC = -232.2575   # Bayesian approach: bayes <- phpe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"bayes\") #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.00439 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 43.9 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 37.6904 seconds (Warm-up) #> Chain 1:                34.9228 seconds (Sampling) #> Chain 1:                72.6132 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.004233 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 42.33 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 37.3279 seconds (Warm-up) #> Chain 2:                32.9651 seconds (Sampling) #> Chain 2:                70.293 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.004221 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 42.21 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 38.1971 seconds (Warm-up) #> Chain 3:                34.4044 seconds (Sampling) #> Chain 3:                72.6015 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.004314 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 43.14 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 36.5792 seconds (Warm-up) #> Chain 4:                34.929 seconds (Sampling) #> Chain 4:                71.5082 seconds (Total) #> Chain 4:  summary(bayes) #> Call: #> phpe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"bayes\") #>  #> Proportional hazards coefficients: #>       mean se_mean    sd   2.5%    25%   50%    75%  97.5%    n_eff Rhat #> arm -0.309   0.001 0.067 -0.446 -0.354 -0.31 -0.265 -0.178 3398.053    1 #> ---  #> Inference for Stan model: yppe. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  # }"},{"path":"/reference/pope.html","id":null,"dir":"Reference","previous_headings":"","what":"pope: Fit Proportional Odds Regression Model with Piecewise Exponential baseline distribution. — pope","title":"pope: Fit Proportional Odds Regression Model with Piecewise Exponential baseline distribution. — pope","text":"pope: Fit Proportional Odds Regression Model Piecewise Exponential baseline distribution.","code":""},{"path":"/reference/pope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pope: Fit Proportional Odds Regression Model with Piecewise Exponential baseline distribution. — pope","text":"","code":"pope(   formula,   data,   n_int = NULL,   rho = NULL,   tau = NULL,   hessian = TRUE,   approach = c(\"mle\", \"bayes\"),   hyper_parms = list(h1_gamma = 0, h2_gamma = 4, mu_beta = 0, sigma_beta = 4),   ... )"},{"path":"/reference/pope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pope: Fit Proportional Odds Regression Model with Piecewise Exponential baseline distribution. — pope","text":"formula object class \"formula\" (one can coerced class): symbolic description model fitted. data optional data frame, list environment (object coercible .data.frame data frame) containing variables model. found data, variables taken environment(formula), typically environment pope called. n_int number intervals PE distribution. NULL, default value (square root n) used. rho time grid PE distribution. NULL, function timeGrid used compute rho. tau maximum time follow-. NULL, tau = max(time), time vector observed survival times. hessian logical; TRUE (default), hessian matrix returned approach=\"mle\". approach approach used fit model (mle: maximum likelihood; bayes: Bayesian approach). hyper_parms list containing hyper-parameters prior distributions (approach = \"bayes\"). specified, default values used. ... Arguments passed either `rstan::optimizing` `rstan::sampling` .","code":""},{"path":"/reference/pope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pope: Fit Proportional Odds Regression Model with Piecewise Exponential baseline distribution. — pope","text":"pope returns object class \"pope\" containing fitted model.","code":""},{"path":"/reference/pope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pope: Fit Proportional Odds Regression Model with Piecewise Exponential baseline distribution. — pope","text":"","code":"# \\donttest{ # ML approach: library(YPPE) mle <- pope(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"mle\") summary(mle) #> Call: #> pope(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"mle\") #>  #> Proportional odds coefficients: #>      Estimate    StdErr z.value p.value #> arm -0.051694  0.103114 -0.5013  0.6161 #>  #> ---  #> loglik = 116.1133   AIC = -210.2267   # Bayesian approach: bayes <- pope(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"bayes\") #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.005083 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 50.83 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 42.041 seconds (Warm-up) #> Chain 1:                41.421 seconds (Sampling) #> Chain 1:                83.462 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.005208 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 52.08 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 42.252 seconds (Warm-up) #> Chain 2:                40.3107 seconds (Sampling) #> Chain 2:                82.5627 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.00518 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 51.8 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 44.8051 seconds (Warm-up) #> Chain 3:                40.7026 seconds (Sampling) #> Chain 3:                85.5077 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.005094 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 50.94 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 42.8235 seconds (Warm-up) #> Chain 4:                40.8772 seconds (Sampling) #> Chain 4:                83.7007 seconds (Total) #> Chain 4:  summary(bayes) #> Call: #> pope(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"bayes\") #>  #> Proportional hazards coefficients: #>       mean se_mean    sd   2.5%   25%    50%   75% 97.5%    n_eff  Rhat #> arm -0.048   0.002 0.104 -0.248 -0.12 -0.049 0.024 0.152 3953.308 0.999 #> ---  #> Inference for Stan model: yppe. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  # }"},{"path":"/reference/print.summary.phpe.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the summary.phpe output — print.summary.phpe","title":"Print the summary.phpe output — print.summary.phpe","text":"Print summary.phpe output","code":""},{"path":"/reference/print.summary.phpe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the summary.phpe output — print.summary.phpe","text":"","code":"# S3 method for summary.phpe print(x, ...)"},{"path":"/reference/print.summary.phpe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the summary.phpe output — print.summary.phpe","text":"x object class summary.phpe. ... arguments passed methods.","code":""},{"path":"/reference/print.summary.phpe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the summary.phpe output — print.summary.phpe","text":"summary fitted model.","code":""},{"path":"/reference/print.summary.pope.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the summary.pope output — print.summary.pope","title":"Print the summary.pope output — print.summary.pope","text":"Print summary.pope output","code":""},{"path":"/reference/print.summary.pope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the summary.pope output — print.summary.pope","text":"","code":"# S3 method for summary.pope print(x, ...)"},{"path":"/reference/print.summary.pope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the summary.pope output — print.summary.pope","text":"x object class summary.pope. ... arguments passed methods.","code":""},{"path":"/reference/print.summary.pope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the summary.pope output — print.summary.pope","text":"summary fitted model.","code":""},{"path":"/reference/print.summary.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the summary.yppe output — print.summary.yppe","title":"Print the summary.yppe output — print.summary.yppe","text":"Print summary.yppe output","code":""},{"path":"/reference/print.summary.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the summary.yppe output — print.summary.yppe","text":"","code":"# S3 method for summary.yppe print(x, ...)"},{"path":"/reference/print.summary.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the summary.yppe output — print.summary.yppe","text":"x object class summary.yppe. ... arguments passed methods.","code":""},{"path":"/reference/print.summary.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the summary.yppe output — print.summary.yppe","text":"summary fitted model.","code":""},{"path":"/reference/rsurv.html","id":null,"dir":"Reference","previous_headings":"","what":"Random generation of survival data — rsurv","title":"Random generation of survival data — rsurv","text":"Function generate random sample survival data.","code":""},{"path":"/reference/rsurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random generation of survival data — rsurv","text":"","code":"rsurv(   formula,   covariates,   baseline = \"weibull\",   gamma,   psi = NULL,   phi = NULL,   max_fu )"},{"path":"/reference/rsurv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random generation of survival data — rsurv","text":"formula formula specifying linear predictors covariates data frame containing covariates used generate survival times baseline baseline model (currently Weibull distribution available) gamma baseline parameters psi short-term regression coefficients phi long-term regression coefficients max_fu maximum follow-time","code":""},{"path":"/reference/summary.phpe.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for the yppe model — summary.phpe","title":"Summary for the yppe model — summary.phpe","text":"Summary yppe model","code":""},{"path":"/reference/summary.phpe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for the yppe model — summary.phpe","text":"","code":"# S3 method for phpe summary(object, ...)"},{"path":"/reference/summary.phpe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for the yppe model — summary.phpe","text":"object objecto class 'yppe'. ... arguments passed methods.","code":""},{"path":"/reference/summary.pope.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for the yppe model — summary.pope","title":"Summary for the yppe model — summary.pope","text":"Summary yppe model","code":""},{"path":"/reference/summary.pope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for the yppe model — summary.pope","text":"","code":"# S3 method for pope summary(object, ...)"},{"path":"/reference/summary.pope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for the yppe model — summary.pope","text":"object objecto class 'yppe'. ... arguments passed methods.","code":""},{"path":"/reference/summary.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for the yppe model — summary.yppe","title":"Summary for the yppe model — summary.yppe","text":"Summary yppe model","code":""},{"path":"/reference/summary.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for the yppe model — summary.yppe","text":"","code":"# S3 method for yppe summary(object, ...)"},{"path":"/reference/summary.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for the yppe model — summary.yppe","text":"object objecto class 'yppe'. ... arguments passed methods.","code":""},{"path":"/reference/survfit.phpe.html","id":null,"dir":"Reference","previous_headings":"","what":"survfit method for phpe models — survfit.phpe","title":"survfit method for phpe models — survfit.phpe","text":"Computes predicted survivor function phpe model.","code":""},{"path":"/reference/survfit.phpe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"survfit method for phpe models — survfit.phpe","text":"","code":"# S3 method for phpe survfit(formula, newdata, ...)"},{"path":"/reference/survfit.phpe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"survfit method for phpe models — survfit.phpe","text":"formula object class phpe newdata data frame containing set explanatory variables. ... arguments passed methods.","code":""},{"path":"/reference/survfit.phpe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"survfit method for phpe models — survfit.phpe","text":"list containing estimated survival probabilities.","code":""},{"path":"/reference/survfit.phpe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"survfit method for phpe models — survfit.phpe","text":"","code":"# \\donttest{ # ML approach: library(YPPE) mle <- phpe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"mle\", init = 0) summary(mle) #> Call: #> phpe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"mle\", init = 0) #>  #> Proportional hazards coefficients: #>     Estimate   StdErr z.value   p.value     #> arm -0.31087  0.06601 -4.7094 2.484e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> ---  #> loglik = 127.1288   AIC = -232.2575  ekm <- survival::survfit(Surv(time, status)~arm, data=ipass) newdata <- data.frame(arm=0:1) St <- survfit(mle, newdata) plot(ekm, col=1:2) with(St, lines(time, surv[[1]])) with(St, lines(time, surv[[2]], col=2))   # Bayesian approach: bayes <- phpe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"bayes\") #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.004238 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 42.38 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 36.591 seconds (Warm-up) #> Chain 1:                34.153 seconds (Sampling) #> Chain 1:                70.744 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.004241 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 42.41 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 37.3443 seconds (Warm-up) #> Chain 2:                33.9234 seconds (Sampling) #> Chain 2:                71.2676 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.004233 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 42.33 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 36.8565 seconds (Warm-up) #> Chain 3:                33.908 seconds (Sampling) #> Chain 3:                70.7645 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.004648 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 46.48 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 37.6339 seconds (Warm-up) #> Chain 4:                35.1217 seconds (Sampling) #> Chain 4:                72.7556 seconds (Total) #> Chain 4:  summary(bayes) #> Call: #> phpe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"bayes\") #>  #> Proportional hazards coefficients: #>       mean se_mean    sd   2.5%    25%   50%    75% 97.5%    n_eff Rhat #> arm -0.311   0.001 0.066 -0.441 -0.355 -0.31 -0.268 -0.18 3627.475    1 #> ---  #> Inference for Stan model: yppe. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  ekm <- survival::survfit(Surv(time, status)~arm, data=ipass) newdata <- data.frame(arm=0:1) St <- survfit(bayes, newdata) plot(ekm, col=1:2) with(St, lines(time, surv[[1]])) with(St, lines(time, surv[[2]], col=2))  # }"},{"path":"/reference/survfit.pope.html","id":null,"dir":"Reference","previous_headings":"","what":"survfit method for pope models — survfit.pope","title":"survfit method for pope models — survfit.pope","text":"Computes predicted survivor function pope model.","code":""},{"path":"/reference/survfit.pope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"survfit method for pope models — survfit.pope","text":"","code":"# S3 method for pope survfit(formula, newdata, ...)"},{"path":"/reference/survfit.pope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"survfit method for pope models — survfit.pope","text":"formula object class pope newdata data frame containing set explanatory variables. ... arguments passed methods.","code":""},{"path":"/reference/survfit.pope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"survfit method for pope models — survfit.pope","text":"list containing estimated survival probabilities.","code":""},{"path":"/reference/survfit.pope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"survfit method for pope models — survfit.pope","text":"","code":"# \\donttest{ # ML approach: library(YPPE) mle <- pope(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"mle\", init = 0) summary(mle) #> Call: #> pope(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"mle\", init = 0) #>  #> Proportional odds coefficients: #>      Estimate    StdErr z.value p.value #> arm -0.051682  0.103114 -0.5012  0.6162 #>  #> ---  #> loglik = 116.1133   AIC = -210.2267  ekm <- survival::survfit(Surv(time, status)~arm, data=ipass) newdata <- data.frame(arm=0:1) St <- survfit(mle, newdata) plot(ekm, col=1:2) with(St, lines(time, surv[[1]])) with(St, lines(time, surv[[2]], col=2))   # Bayesian approach: bayes <- pope(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"bayes\") #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.005093 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 50.93 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 42.5778 seconds (Warm-up) #> Chain 1:                41.9847 seconds (Sampling) #> Chain 1:                84.5624 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.005082 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 50.82 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 42.5713 seconds (Warm-up) #> Chain 2:                40.3436 seconds (Sampling) #> Chain 2:                82.9149 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.005093 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 50.93 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 42.2874 seconds (Warm-up) #> Chain 3:                41.0007 seconds (Sampling) #> Chain 3:                83.2881 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.005096 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 50.96 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 44.1823 seconds (Warm-up) #> Chain 4:                40.9988 seconds (Sampling) #> Chain 4:                85.1811 seconds (Total) #> Chain 4:  summary(bayes) #> Call: #> pope(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"bayes\") #>  #> Proportional hazards coefficients: #>       mean se_mean    sd   2.5%    25%    50%   75% 97.5%   n_eff  Rhat #> arm -0.046   0.002 0.102 -0.243 -0.117 -0.047 0.024 0.153 4104.09 0.999 #> ---  #> Inference for Stan model: yppe. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  ekm <- survival::survfit(Surv(time, status)~arm, data=ipass) newdata <- data.frame(arm=0:1) St <- survfit(bayes, newdata) plot(ekm, col=1:2) with(St, lines(time, surv[[1]])) with(St, lines(time, surv[[2]], col=2))  # }"},{"path":"/reference/survfit.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"survfit method for yppe models — survfit.yppe","title":"survfit method for yppe models — survfit.yppe","text":"Computes predicted survivor function yppe model.","code":""},{"path":"/reference/survfit.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"survfit method for yppe models — survfit.yppe","text":"","code":"# S3 method for yppe survfit(formula, newdata, ...)"},{"path":"/reference/survfit.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"survfit method for yppe models — survfit.yppe","text":"formula object class yppe newdata data frame containing set explanatory variables. ... arguments passed methods.","code":""},{"path":"/reference/survfit.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"survfit method for yppe models — survfit.yppe","text":"list containing estimated survival probabilities.","code":""},{"path":"/reference/survfit.yppe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"survfit method for yppe models — survfit.yppe","text":"","code":"# \\donttest{ # ML approach: library(YPPE) mle <- yppe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"mle\") summary(mle) #> Call: #> yppe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"mle\") #>  #> Short-term coefficients: #>     Estimate  StdErr z.value   p.value     #> arm  1.04164 0.16656  6.2539 4.004e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Long-term coefficients: #>      Estimate    StdErr z.value   p.value     #> arm -1.238470  0.084558 -14.646 < 2.2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> ---  #> loglik = 178.3117   AIC = -332.6235  ekm <- survival::survfit(Surv(time, status)~arm, data=ipass) newdata <- data.frame(arm=0:1) St <- survfit(mle, newdata) plot(ekm, col=1:2) with(St, lines(time, surv[[1]])) with(St, lines(time, surv[[2]], col=2))   # Bayesian approach: bayes <- yppe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"bayes\") #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.007664 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 76.64 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 69.8366 seconds (Warm-up) #> Chain 1:                63.959 seconds (Sampling) #> Chain 1:                133.796 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.007459 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 74.59 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 69.1349 seconds (Warm-up) #> Chain 2:                68.7028 seconds (Sampling) #> Chain 2:                137.838 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.007431 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 74.31 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 68.9006 seconds (Warm-up) #> Chain 3:                65.4574 seconds (Sampling) #> Chain 3:                134.358 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.007475 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 74.75 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 70.8224 seconds (Warm-up) #> Chain 4:                64.5344 seconds (Sampling) #> Chain 4:                135.357 seconds (Total) #> Chain 4:  summary(bayes) #> Call: #> yppe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"bayes\") #>  #> Short-term coefficients: #>      mean se_mean    sd  2.5%   25%   50%   75% 97.5%    n_eff Rhat #> arm 1.036   0.003 0.162 0.721 0.926 1.036 1.143 1.363 2415.388    1 #>  #> Long-term coefficients: #>       mean se_mean    sd   2.5%    25%    50%    75%  97.5%    n_eff  Rhat #> arm -1.232   0.002 0.083 -1.394 -1.287 -1.232 -1.175 -1.068 2423.558 1.001 #>  #> ---  #> Inference for Stan model: yppe. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  ekm <- survival::survfit(Surv(time, status)~arm, data=ipass) newdata <- data.frame(arm=0:1) St <- survfit(bayes, newdata) plot(ekm, col=1:2) with(St, lines(time, surv[[1]])) with(St, lines(time, surv[[2]], col=2))  # }"},{"path":"/reference/timeGrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Time grid — timeGrid","title":"Time grid — timeGrid","text":"Time grid","code":""},{"path":"/reference/timeGrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time grid — timeGrid","text":"","code":"timeGrid(time, status, n_int = NULL)"},{"path":"/reference/timeGrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time grid — timeGrid","text":"time Vector failure times status Vector failure indicators n_int Optional. Number intervals. NULL, number intervals set equal number distinct observed failure times.","code":""},{"path":"/reference/timeGrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time grid — timeGrid","text":"Time grid.","code":""},{"path":"/reference/vcov.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance-covariance matrix for a yppe model — vcov.yppe","title":"Variance-covariance matrix for a yppe model — vcov.yppe","text":"function extracts returns variance-covariance matrix associated regression coefficients maximum likelihood estimation approach used model fitting.","code":""},{"path":"/reference/vcov.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance-covariance matrix for a yppe model — vcov.yppe","text":"","code":"# S3 method for yppe vcov(object, ...)"},{"path":"/reference/vcov.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance-covariance matrix for a yppe model — vcov.yppe","text":"object object class yppe. ... arguments passed methods.","code":""},{"path":"/reference/vcov.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance-covariance matrix for a yppe model — vcov.yppe","text":"variance-covariance matrix associated regression coefficients.","code":""},{"path":"/reference/yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"yppe: Fit the Yang and Prentice Regression Model with Piecewise Exponential baseline distribution. — yppe","title":"yppe: Fit the Yang and Prentice Regression Model with Piecewise Exponential baseline distribution. — yppe","text":"yppe: Fit Yang Prentice Regression Model Piecewise Exponential baseline distribution.","code":""},{"path":"/reference/yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yppe: Fit the Yang and Prentice Regression Model with Piecewise Exponential baseline distribution. — yppe","text":"","code":"yppe(   formula,   data,   n_int = NULL,   rho = NULL,   tau = NULL,   hessian = TRUE,   approach = c(\"mle\", \"bayes\"),   hyper_parms = list(h1_gamma = 0, h2_gamma = 4, mu_psi = 0, sigma_psi = 4, mu_phi = 0,     sigma_phi = 4, mu_beta = 0, sigma_beta = 4),   ... )"},{"path":"/reference/yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"yppe: Fit the Yang and Prentice Regression Model with Piecewise Exponential baseline distribution. — yppe","text":"formula object class \"formula\" (one can coerced class): symbolic description model fitted. data optional data frame, list environment (object coercible .data.frame data frame) containing variables model. found data, variables taken environment(formula), typically environment yppe called. n_int number intervals PE distribution. NULL, default value (square root n) used. rho time grid PE distribution. NULL, function timeGrid used compute rho. tau maximum time follow-. NULL, tau = max(time), time vector observed survival times. hessian logical; TRUE (default), hessian matrix returned approach=\"mle\". approach approach used fit model (mle: maximum likelihood; bayes: Bayesian approach). hyper_parms list containing hyper-parameters prior distributions (approach = \"bayes\"). specified, default values used. ... Arguments passed either `rstan::optimizing` `rstan::sampling` .","code":""},{"path":"/reference/yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"yppe: Fit the Yang and Prentice Regression Model with Piecewise Exponential baseline distribution. — yppe","text":"yppe returns object class \"yppe\" containing fitted model.","code":""},{"path":"/reference/yppe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"yppe: Fit the Yang and Prentice Regression Model with Piecewise Exponential baseline distribution. — yppe","text":"","code":"# \\donttest{ # ML approach: library(YPPE) mle <- yppe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"mle\") summary(mle) #> Call: #> yppe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"mle\") #>  #> Short-term coefficients: #>     Estimate  StdErr z.value   p.value     #> arm  1.04157 0.16656  6.2536 4.012e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Long-term coefficients: #>      Estimate    StdErr z.value   p.value     #> arm -1.238441  0.084559 -14.646 < 2.2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> ---  #> loglik = 178.3117   AIC = -332.6235   # Bayesian approach: bayes <- yppe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"bayes\") #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.007457 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 74.57 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 69.2182 seconds (Warm-up) #> Chain 1:                64.305 seconds (Sampling) #> Chain 1:                133.523 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.007562 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 75.62 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 70.5487 seconds (Warm-up) #> Chain 2:                61.1826 seconds (Sampling) #> Chain 2:                131.731 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.007476 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 74.76 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 69.0363 seconds (Warm-up) #> Chain 3:                63.7714 seconds (Sampling) #> Chain 3:                132.808 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.007488 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 74.88 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 74.5729 seconds (Warm-up) #> Chain 4:                63.4344 seconds (Sampling) #> Chain 4:                138.007 seconds (Total) #> Chain 4:  summary(bayes) #> Call: #> yppe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"bayes\") #>  #> Short-term coefficients: #>      mean se_mean    sd  2.5%   25%  50%   75% 97.5%    n_eff  Rhat #> arm 1.054   0.003 0.165 0.738 0.941 1.05 1.167 1.376 2562.834 1.001 #>  #> Long-term coefficients: #>       mean se_mean    sd   2.5%    25%    50%    75%  97.5%    n_eff Rhat #> arm -1.241   0.002 0.083 -1.401 -1.298 -1.242 -1.183 -1.078 3011.647    1 #>  #> ---  #> Inference for Stan model: yppe. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  # }"}]
