// Generated by rstantools.  Do not edit by hand.

/*
    YPPE is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    YPPE is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with YPPE.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_yppe_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'yppe', line 88, column 2 to column 29)",
                                                      " (in 'yppe', line 89, column 2 to column 29)",
                                                      " (in 'yppe', line 90, column 2 to column 30)",
                                                      " (in 'yppe', line 91, column 2 to column 27)",
                                                      " (in 'yppe', line 94, column 9 to column 10)",
                                                      " (in 'yppe', line 94, column 2 to column 19)",
                                                      " (in 'yppe', line 95, column 9 to column 23)",
                                                      " (in 'yppe', line 95, column 2 to column 34)",
                                                      " (in 'yppe', line 96, column 9 to column 23)",
                                                      " (in 'yppe', line 96, column 2 to column 33)",
                                                      " (in 'yppe', line 97, column 9 to column 23)",
                                                      " (in 'yppe', line 97, column 2 to column 34)",
                                                      " (in 'yppe', line 98, column 9 to column 10)",
                                                      " (in 'yppe', line 98, column 2 to column 18)",
                                                      " (in 'yppe', line 99, column 9 to column 10)",
                                                      " (in 'yppe', line 99, column 2 to column 46)",
                                                      " (in 'yppe', line 100, column 9 to column 10)",
                                                      " (in 'yppe', line 100, column 2 to column 28)",
                                                      " (in 'yppe', line 119, column 4 to column 34)",
                                                      " (in 'yppe', line 118, column 7 to line 120, column 3)",
                                                      " (in 'yppe', line 116, column 4 to column 22)",
                                                      " (in 'yppe', line 117, column 4 to column 58)",
                                                      " (in 'yppe', line 115, column 24 to line 118, column 3)",
                                                      " (in 'yppe', line 115, column 8 to line 120, column 3)",
                                                      " (in 'yppe', line 113, column 4 to column 22)",
                                                      " (in 'yppe', line 114, column 4 to column 58)",
                                                      " (in 'yppe', line 112, column 24 to line 115, column 3)",
                                                      " (in 'yppe', line 112, column 8 to line 120, column 3)",
                                                      " (in 'yppe', line 107, column 4 to column 21)",
                                                      " (in 'yppe', line 108, column 4 to column 20)",
                                                      " (in 'yppe', line 109, column 4 to column 22)",
                                                      " (in 'yppe', line 110, column 4 to column 29)",
                                                      " (in 'yppe', line 111, column 4 to column 85)",
                                                      " (in 'yppe', line 106, column 24 to line 112, column 3)",
                                                      " (in 'yppe', line 106, column 8 to line 120, column 3)",
                                                      " (in 'yppe', line 102, column 8 to column 25)",
                                                      " (in 'yppe', line 103, column 8 to column 24)",
                                                      " (in 'yppe', line 104, column 8 to column 33)",
                                                      " (in 'yppe', line 105, column 8 to column 79)",
                                                      " (in 'yppe', line 101, column 18 to line 106, column 3)",
                                                      " (in 'yppe', line 101, column 2 to line 120, column 3)",
                                                      " (in 'yppe', line 121, column 2 to column 24)",
                                                      " (in 'yppe', line 123, column 4 to column 42)",
                                                      " (in 'yppe', line 124, column 4 to column 36)",
                                                      " (in 'yppe', line 125, column 4 to column 36)",
                                                      " (in 'yppe', line 126, column 4 to column 39)",
                                                      " (in 'yppe', line 122, column 17 to line 127, column 3)",
                                                      " (in 'yppe', line 122, column 2 to line 127, column 3)",
                                                      " (in 'yppe', line 66, column 2 to column 17)",
                                                      " (in 'yppe', line 67, column 2 to column 17)",
                                                      " (in 'yppe', line 68, column 2 to column 17)",
                                                      " (in 'yppe', line 69, column 2 to column 17)",
                                                      " (in 'yppe', line 70, column 2 to column 14)",
                                                      " (in 'yppe', line 71, column 9 to column 10)",
                                                      " (in 'yppe', line 71, column 2 to column 19)",
                                                      " (in 'yppe', line 72, column 10 to column 11)",
                                                      " (in 'yppe', line 72, column 2 to column 13)",
                                                      " (in 'yppe', line 73, column 9 to column 23)",
                                                      " (in 'yppe', line 73, column 25 to column 26)",
                                                      " (in 'yppe', line 73, column 2 to column 30)",
                                                      " (in 'yppe', line 74, column 9 to column 23)",
                                                      " (in 'yppe', line 74, column 25 to column 26)",
                                                      " (in 'yppe', line 74, column 2 to column 30)",
                                                      " (in 'yppe', line 75, column 2 to column 20)",
                                                      " (in 'yppe', line 76, column 9 to column 10)",
                                                      " (in 'yppe', line 76, column 12 to column 13)",
                                                      " (in 'yppe', line 76, column 2 to column 19)",
                                                      " (in 'yppe', line 77, column 2 to column 16)",
                                                      " (in 'yppe', line 78, column 2 to column 16)",
                                                      " (in 'yppe', line 79, column 2 to column 15)",
                                                      " (in 'yppe', line 80, column 2 to column 14)",
                                                      " (in 'yppe', line 81, column 2 to column 14)",
                                                      " (in 'yppe', line 82, column 2 to column 27)",
                                                      " (in 'yppe', line 83, column 2 to column 26)",
                                                      " (in 'yppe', line 84, column 2 to column 26)",
                                                      " (in 'yppe', line 85, column 2 to column 33)",
                                                      " (in 'yppe', line 88, column 9 to column 23)",
                                                      " (in 'yppe', line 89, column 9 to column 23)",
                                                      " (in 'yppe', line 90, column 9 to column 23)",
                                                      " (in 'yppe', line 91, column 18 to column 19)",
                                                      " (in 'yppe', line 8, column 11 to column 12)",
                                                      " (in 'yppe', line 8, column 4 to column 18)",
                                                      " (in 'yppe', line 9, column 11 to column 12)",
                                                      " (in 'yppe', line 9, column 4 to column 21)",
                                                      " (in 'yppe', line 10, column 11 to column 12)",
                                                      " (in 'yppe', line 10, column 4 to column 21)",
                                                      " (in 'yppe', line 11, column 11 to column 12)",
                                                      " (in 'yppe', line 11, column 4 to column 21)",
                                                      " (in 'yppe', line 12, column 11 to column 12)",
                                                      " (in 'yppe', line 12, column 4 to column 20)",
                                                      " (in 'yppe', line 13, column 11 to column 12)",
                                                      " (in 'yppe', line 13, column 4 to column 18)",
                                                      " (in 'yppe', line 15, column 4 to column 21)",
                                                      " (in 'yppe', line 16, column 4 to column 25)",
                                                      " (in 'yppe', line 18, column 4 to column 23)",
                                                      " (in 'yppe', line 19, column 4 to column 48)",
                                                      " (in 'yppe', line 20, column 4 to column 34)",
                                                      " (in 'yppe', line 21, column 4 to column 39)",
                                                      " (in 'yppe', line 23, column 4 to column 18)",
                                                      " (in 'yppe', line 7, column 120 to line 24, column 3)",
                                                      " (in 'yppe', line 31, column 11 to column 12)",
                                                      " (in 'yppe', line 31, column 4 to column 18)",
                                                      " (in 'yppe', line 32, column 11 to column 12)",
                                                      " (in 'yppe', line 32, column 4 to column 21)",
                                                      " (in 'yppe', line 33, column 11 to column 12)",
                                                      " (in 'yppe', line 33, column 4 to column 21)",
                                                      " (in 'yppe', line 34, column 11 to column 12)",
                                                      " (in 'yppe', line 34, column 4 to column 21)",
                                                      " (in 'yppe', line 35, column 11 to column 12)",
                                                      " (in 'yppe', line 35, column 4 to column 20)",
                                                      " (in 'yppe', line 36, column 11 to column 12)",
                                                      " (in 'yppe', line 36, column 4 to column 18)",
                                                      " (in 'yppe', line 38, column 4 to column 21)",
                                                      " (in 'yppe', line 39, column 4 to column 36)",
                                                      " (in 'yppe', line 41, column 4 to column 23)",
                                                      " (in 'yppe', line 42, column 4 to column 59)",
                                                      " (in 'yppe', line 43, column 4 to column 34)",
                                                      " (in 'yppe', line 44, column 4 to column 39)",
                                                      " (in 'yppe', line 46, column 4 to column 18)",
                                                      " (in 'yppe', line 30, column 137 to line 47, column 3)",
                                                      " (in 'yppe', line 52, column 11 to column 12)",
                                                      " (in 'yppe', line 52, column 4 to column 62)",
                                                      " (in 'yppe', line 53, column 4 to column 18)",
                                                      " (in 'yppe', line 51, column 83 to line 54, column 3)",
                                                      " (in 'yppe', line 59, column 11 to column 12)",
                                                      " (in 'yppe', line 59, column 4 to column 42)",
                                                      " (in 'yppe', line 60, column 11 to column 12)",
                                                      " (in 'yppe', line 60, column 4 to column 78)",
                                                      " (in 'yppe', line 61, column 4 to column 18)",
                                                      " (in 'yppe', line 58, column 83 to line 62, column 3)"};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>>>, -1, 1>
loglik_yp1(const T0__& status_arg__, const T1__& lht0_arg__,
           const T2__& Ht0_arg__, const T3__& lp_short_arg__,
           const T4__& lp_long_arg__, const T5__& ratio_arg__, const int& n,
           const int& q, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>>>;
  const auto& status = to_ref(status_arg__);
  const auto& lht0 = to_ref(lht0_arg__);
  const auto& Ht0 = to_ref(Ht0_arg__);
  const auto& lp_short = to_ref(lp_short_arg__);
  const auto& lp_long = to_ref(lp_long_arg__);
  const auto& ratio = to_ref(ratio_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 81;
    validate_non_negative_index("Rt0", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> Rt0;
    Rt0 = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(Rt0, DUMMY_VAR__);
    
    current_statement__ = 83;
    validate_non_negative_index("log_ht", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> log_ht;
    log_ht = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(log_ht, DUMMY_VAR__);
    
    current_statement__ = 85;
    validate_non_negative_index("log_St", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> log_St;
    log_St = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(log_St, DUMMY_VAR__);
    
    current_statement__ = 87;
    validate_non_negative_index("loglik", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> loglik;
    loglik = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(loglik, DUMMY_VAR__);
    
    current_statement__ = 89;
    validate_non_negative_index("theta", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> theta;
    theta = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(theta, DUMMY_VAR__);
    
    current_statement__ = 91;
    validate_non_negative_index("aux", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> aux;
    aux = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(aux, DUMMY_VAR__);
    
    current_statement__ = 93;
    assign(Rt0, nil_index_list(), stan::math::expm1(Ht0),
      "assigning variable Rt0");
    current_statement__ = 94;
    assign(theta, nil_index_list(), stan::math::exp(lp_long),
      "assigning variable theta");
    current_statement__ = 95;
    assign(aux, nil_index_list(), elt_multiply(ratio, Rt0),
      "assigning variable aux");
    current_statement__ = 96;
    assign(log_ht, nil_index_list(),
      add(add(subtract(lp_short, stan::math::log1p(aux)), lht0), Ht0),
      "assigning variable log_ht");
    current_statement__ = 97;
    assign(log_St, nil_index_list(),
      elt_multiply(minus(theta), stan::math::log1p(aux)),
      "assigning variable log_St");
    current_statement__ = 98;
    assign(loglik, nil_index_list(),
      add(elt_multiply(status, log_ht), log_St), "assigning variable loglik");
    current_statement__ = 99;
    return loglik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct loglik_yp1_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>>>, -1, 1>
operator()(const T0__& status, const T1__& lht0, const T2__& Ht0,
           const T3__& lp_short, const T4__& lp_long, const T5__& ratio,
           const int& n, const int& q, std::ostream* pstream__)  const 
{
return loglik_yp1(status, lht0, Ht0, lp_short, lp_long, ratio, n, q,
         pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
stan::value_type_t<T6__>>>, -1, 1>
loglik_yp2(const T0__& status_arg__, const T1__& lht0_arg__,
           const T2__& Ht0_arg__, const T3__& lp_short_arg__,
           const T4__& lp_long_arg__, const T5__& lp_const_arg__,
           const T6__& ratio_arg__, const int& n, const int& q,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
          stan::value_type_t<T6__>>>;
  const auto& status = to_ref(status_arg__);
  const auto& lht0 = to_ref(lht0_arg__);
  const auto& Ht0 = to_ref(Ht0_arg__);
  const auto& lp_short = to_ref(lp_short_arg__);
  const auto& lp_long = to_ref(lp_long_arg__);
  const auto& lp_const = to_ref(lp_const_arg__);
  const auto& ratio = to_ref(ratio_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 101;
    validate_non_negative_index("Rt0", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> Rt0;
    Rt0 = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(Rt0, DUMMY_VAR__);
    
    current_statement__ = 103;
    validate_non_negative_index("log_ht", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> log_ht;
    log_ht = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(log_ht, DUMMY_VAR__);
    
    current_statement__ = 105;
    validate_non_negative_index("log_St", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> log_St;
    log_St = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(log_St, DUMMY_VAR__);
    
    current_statement__ = 107;
    validate_non_negative_index("loglik", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> loglik;
    loglik = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(loglik, DUMMY_VAR__);
    
    current_statement__ = 109;
    validate_non_negative_index("theta", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> theta;
    theta = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(theta, DUMMY_VAR__);
    
    current_statement__ = 111;
    validate_non_negative_index("aux", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> aux;
    aux = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(aux, DUMMY_VAR__);
    
    current_statement__ = 113;
    assign(Rt0, nil_index_list(), stan::math::expm1(Ht0),
      "assigning variable Rt0");
    current_statement__ = 114;
    assign(theta, nil_index_list(), stan::math::exp(add(lp_long, lp_const)),
      "assigning variable theta");
    current_statement__ = 115;
    assign(aux, nil_index_list(), elt_multiply(ratio, Rt0),
      "assigning variable aux");
    current_statement__ = 116;
    assign(log_ht, nil_index_list(),
      add(
        add(subtract(add(lp_short, lp_const), stan::math::log1p(aux)), lht0),
        Ht0), "assigning variable log_ht");
    current_statement__ = 117;
    assign(log_St, nil_index_list(),
      elt_multiply(minus(theta), stan::math::log1p(aux)),
      "assigning variable log_St");
    current_statement__ = 118;
    assign(loglik, nil_index_list(),
      add(elt_multiply(status, log_ht), log_St), "assigning variable loglik");
    current_statement__ = 119;
    return loglik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct loglik_yp2_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
stan::value_type_t<T6__>>>, -1, 1>
operator()(const T0__& status, const T1__& lht0, const T2__& Ht0,
           const T3__& lp_short, const T4__& lp_long, const T5__& lp_const,
           const T6__& ratio, const int& n, const int& q,
           std::ostream* pstream__)  const 
{
return loglik_yp2(status, lht0, Ht0, lp_short, lp_long, lp_const, ratio, n,
         q, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, 1>
loglik_ph(const T0__& status_arg__, const T1__& lht0_arg__,
          const T2__& Ht0_arg__, const T3__& lp_arg__, const int& n,
          const int& p, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  const auto& status = to_ref(status_arg__);
  const auto& lht0 = to_ref(lht0_arg__);
  const auto& Ht0 = to_ref(Ht0_arg__);
  const auto& lp = to_ref(lp_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 121;
    validate_non_negative_index("loglik", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> loglik;
    loglik = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(loglik, DUMMY_VAR__);
    
    current_statement__ = 122;
    assign(loglik, nil_index_list(),
      subtract(elt_multiply(status, add(lht0, lp)),
        elt_multiply(Ht0, stan::math::exp(lp))), "assigning variable loglik");
    current_statement__ = 123;
    return loglik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct loglik_ph_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, 1>
operator()(const T0__& status, const T1__& lht0, const T2__& Ht0,
           const T3__& lp, const int& n, const int& p,
           std::ostream* pstream__)  const 
{
return loglik_ph(status, lht0, Ht0, lp, n, p, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, 1>
loglik_po(const T0__& status_arg__, const T1__& lht0_arg__,
          const T2__& Ht0_arg__, const T3__& lp_arg__, const int& n,
          const int& p, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  const auto& status = to_ref(status_arg__);
  const auto& lht0 = to_ref(lht0_arg__);
  const auto& Ht0 = to_ref(Ht0_arg__);
  const auto& lp = to_ref(lp_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 125;
    validate_non_negative_index("aux", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> aux;
    aux = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(aux, DUMMY_VAR__);
    
    current_statement__ = 126;
    assign(aux, nil_index_list(),
      elt_multiply(stan::math::exp(lp), stan::math::expm1(Ht0)),
      "assigning variable aux");
    current_statement__ = 127;
    validate_non_negative_index("loglik", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> loglik;
    loglik = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(loglik, DUMMY_VAR__);
    
    current_statement__ = 128;
    assign(loglik, nil_index_list(),
      subtract(elt_multiply(status, add(add(lht0, lp), Ht0)),
        elt_multiply(add(1, status), stan::math::log1p(aux))),
      "assigning variable loglik");
    current_statement__ = 129;
    return loglik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct loglik_po_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, 1>
operator()(const T0__& status, const T1__& lht0, const T2__& Ht0,
           const T3__& lp, const int& n, const int& p,
           std::ostream* pstream__)  const 
{
return loglik_po(status, lht0, Ht0, lp, n, p, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_yppe final : public model_base_crtp<model_yppe> {
private:
  int n;
  int m;
  int q;
  int p;
  int survreg;
  Eigen::Matrix<double, -1, 1> status;
  std::vector<int> idt;
  Eigen::Matrix<double, -1, -1> Z;
  Eigen::Matrix<double, -1, -1> X;
  double tau;
  Eigen::Matrix<double, -1, -1> ttt;
  double h1_gamma;
  double h2_gamma;
  double mu_beta;
  double mu_psi;
  double mu_phi;
  double sigma_beta;
  double sigma_psi;
  double sigma_phi;
  int approach;
  int psi_1dim__;
  int phi_1dim__;
  int beta_1dim__;
 
public:
  ~model_yppe() { }
  
  inline std::string model_name() const final { return "model_yppe"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_yppe(stan::io::var_context& context__,
             unsigned int random_seed__ = 0,
             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_yppe_namespace::model_yppe";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 49;
      context__.validate_dims("data initialization","n","int",
          context__.to_vec());
      n = std::numeric_limits<int>::min();
      
      current_statement__ = 49;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 49;
      current_statement__ = 49;
      check_greater_or_equal(function__, "n", n, 1);
      current_statement__ = 50;
      context__.validate_dims("data initialization","m","int",
          context__.to_vec());
      m = std::numeric_limits<int>::min();
      
      current_statement__ = 50;
      m = context__.vals_i("m")[(1 - 1)];
      current_statement__ = 50;
      current_statement__ = 50;
      check_greater_or_equal(function__, "m", m, 1);
      current_statement__ = 51;
      context__.validate_dims("data initialization","q","int",
          context__.to_vec());
      q = std::numeric_limits<int>::min();
      
      current_statement__ = 51;
      q = context__.vals_i("q")[(1 - 1)];
      current_statement__ = 51;
      current_statement__ = 51;
      check_greater_or_equal(function__, "q", q, 0);
      current_statement__ = 52;
      context__.validate_dims("data initialization","p","int",
          context__.to_vec());
      p = std::numeric_limits<int>::min();
      
      current_statement__ = 52;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 52;
      current_statement__ = 52;
      check_greater_or_equal(function__, "p", p, 0);
      current_statement__ = 53;
      context__.validate_dims("data initialization","survreg","int",
          context__.to_vec());
      survreg = std::numeric_limits<int>::min();
      
      current_statement__ = 53;
      survreg = context__.vals_i("survreg")[(1 - 1)];
      current_statement__ = 54;
      validate_non_negative_index("status", "n", n);
      current_statement__ = 55;
      context__.validate_dims("data initialization","status","double",
          context__.to_vec(n));
      status = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(status, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> status_flat__;
        current_statement__ = 55;
        assign(status_flat__, nil_index_list(), context__.vals_r("status"),
          "assigning variable status_flat__");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 55;
          assign(status, cons_list(index_uni(sym1__), nil_index_list()),
            status_flat__[(pos__ - 1)], "assigning variable status");
          current_statement__ = 55;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 56;
      validate_non_negative_index("idt", "n", n);
      current_statement__ = 57;
      context__.validate_dims("data initialization","idt","int",
          context__.to_vec(n));
      idt = std::vector<int>(n, std::numeric_limits<int>::min());
      
      current_statement__ = 57;
      assign(idt, nil_index_list(), context__.vals_i("idt"),
        "assigning variable idt");
      current_statement__ = 58;
      validate_non_negative_index("Z", "q == 0 ? 0 : n",
                                  (logical_eq(q, 0) ? 0 : n));
      current_statement__ = 59;
      validate_non_negative_index("Z", "q", q);
      current_statement__ = 60;
      context__.validate_dims("data initialization","Z","double",
          context__.to_vec((logical_eq(q, 0) ? 0 : n), q));
      Z = Eigen::Matrix<double, -1, -1>((logical_eq(q, 0) ? 0 : n), q);
      stan::math::fill(Z, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Z_flat__;
        current_statement__ = 60;
        assign(Z_flat__, nil_index_list(), context__.vals_r("Z"),
          "assigning variable Z_flat__");
        current_statement__ = 60;
        pos__ = 1;
        current_statement__ = 60;
        for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
          current_statement__ = 60;
          for (int sym2__ = 1; sym2__ <= (logical_eq(q, 0) ? 0 : n); ++sym2__) {
            current_statement__ = 60;
            assign(Z,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Z_flat__[(pos__ - 1)], "assigning variable Z");
            current_statement__ = 60;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 61;
      validate_non_negative_index("X", "p == 0 ? 0 : n",
                                  (logical_eq(p, 0) ? 0 : n));
      current_statement__ = 62;
      validate_non_negative_index("X", "p", p);
      current_statement__ = 63;
      context__.validate_dims("data initialization","X","double",
          context__.to_vec((logical_eq(p, 0) ? 0 : n), p));
      X = Eigen::Matrix<double, -1, -1>((logical_eq(p, 0) ? 0 : n), p);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 63;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 63;
        pos__ = 1;
        current_statement__ = 63;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 63;
          for (int sym2__ = 1; sym2__ <= (logical_eq(p, 0) ? 0 : n); ++sym2__) {
            current_statement__ = 63;
            assign(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_flat__[(pos__ - 1)], "assigning variable X");
            current_statement__ = 63;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 64;
      context__.validate_dims("data initialization","tau","double",
          context__.to_vec());
      tau = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 64;
      tau = context__.vals_r("tau")[(1 - 1)];
      current_statement__ = 64;
      current_statement__ = 64;
      check_greater_or_equal(function__, "tau", tau, 0);
      current_statement__ = 65;
      validate_non_negative_index("ttt", "n", n);
      current_statement__ = 66;
      validate_non_negative_index("ttt", "m", m);
      current_statement__ = 67;
      context__.validate_dims("data initialization","ttt","double",
          context__.to_vec(n, m));
      ttt = Eigen::Matrix<double, -1, -1>(n, m);
      stan::math::fill(ttt, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ttt_flat__;
        current_statement__ = 67;
        assign(ttt_flat__, nil_index_list(), context__.vals_r("ttt"),
          "assigning variable ttt_flat__");
        current_statement__ = 67;
        pos__ = 1;
        current_statement__ = 67;
        for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
          current_statement__ = 67;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 67;
            assign(ttt,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              ttt_flat__[(pos__ - 1)], "assigning variable ttt");
            current_statement__ = 67;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 68;
      context__.validate_dims("data initialization","h1_gamma","double",
          context__.to_vec());
      h1_gamma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 68;
      h1_gamma = context__.vals_r("h1_gamma")[(1 - 1)];
      current_statement__ = 69;
      context__.validate_dims("data initialization","h2_gamma","double",
          context__.to_vec());
      h2_gamma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 69;
      h2_gamma = context__.vals_r("h2_gamma")[(1 - 1)];
      current_statement__ = 70;
      context__.validate_dims("data initialization","mu_beta","double",
          context__.to_vec());
      mu_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 70;
      mu_beta = context__.vals_r("mu_beta")[(1 - 1)];
      current_statement__ = 71;
      context__.validate_dims("data initialization","mu_psi","double",
          context__.to_vec());
      mu_psi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 71;
      mu_psi = context__.vals_r("mu_psi")[(1 - 1)];
      current_statement__ = 72;
      context__.validate_dims("data initialization","mu_phi","double",
          context__.to_vec());
      mu_phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 72;
      mu_phi = context__.vals_r("mu_phi")[(1 - 1)];
      current_statement__ = 73;
      context__.validate_dims("data initialization","sigma_beta","double",
          context__.to_vec());
      sigma_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 73;
      sigma_beta = context__.vals_r("sigma_beta")[(1 - 1)];
      current_statement__ = 73;
      current_statement__ = 73;
      check_greater_or_equal(function__, "sigma_beta", sigma_beta, 0);
      current_statement__ = 74;
      context__.validate_dims("data initialization","sigma_psi","double",
          context__.to_vec());
      sigma_psi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 74;
      sigma_psi = context__.vals_r("sigma_psi")[(1 - 1)];
      current_statement__ = 74;
      current_statement__ = 74;
      check_greater_or_equal(function__, "sigma_psi", sigma_psi, 0);
      current_statement__ = 75;
      context__.validate_dims("data initialization","sigma_phi","double",
          context__.to_vec());
      sigma_phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 75;
      sigma_phi = context__.vals_r("sigma_phi")[(1 - 1)];
      current_statement__ = 75;
      current_statement__ = 75;
      check_greater_or_equal(function__, "sigma_phi", sigma_phi, 0);
      current_statement__ = 76;
      context__.validate_dims("data initialization","approach","int",
          context__.to_vec());
      approach = std::numeric_limits<int>::min();
      
      current_statement__ = 76;
      approach = context__.vals_i("approach")[(1 - 1)];
      current_statement__ = 76;
      current_statement__ = 76;
      check_greater_or_equal(function__, "approach", approach, 0);
      current_statement__ = 76;
      current_statement__ = 76;
      check_less_or_equal(function__, "approach", approach, 1);
      current_statement__ = 77;
      psi_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 77;
      psi_1dim__ = (logical_eq(q, 0) ? 0 : q);
      current_statement__ = 77;
      validate_non_negative_index("psi", "q == 0 ? 0 : q", psi_1dim__);
      current_statement__ = 78;
      phi_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 78;
      phi_1dim__ = (logical_eq(q, 0) ? 0 : q);
      current_statement__ = 78;
      validate_non_negative_index("phi", "q == 0 ? 0 : q", phi_1dim__);
      current_statement__ = 79;
      beta_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 79;
      beta_1dim__ = (logical_eq(p, 0) ? 0 : p);
      current_statement__ = 79;
      validate_non_negative_index("beta", "p == 0 ? 0 : p", beta_1dim__);
      current_statement__ = 80;
      validate_non_negative_index("gamma", "m", m);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += psi_1dim__;
      num_params_r__ += phi_1dim__;
      num_params_r__ += beta_1dim__;
      num_params_r__ += m;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_yppe_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> psi;
      psi = Eigen::Matrix<local_scalar_t__, -1, 1>(psi_1dim__);
      stan::math::fill(psi, DUMMY_VAR__);
      
      current_statement__ = 1;
      psi = in__.vector(psi_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, 1>(phi_1dim__);
      stan::math::fill(phi, DUMMY_VAR__);
      
      current_statement__ = 2;
      phi = in__.vector(phi_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(beta_1dim__);
      stan::math::fill(beta, DUMMY_VAR__);
      
      current_statement__ = 3;
      beta = in__.vector(beta_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma;
      gamma = Eigen::Matrix<local_scalar_t__, -1, 1>(m);
      stan::math::fill(gamma, DUMMY_VAR__);
      
      current_statement__ = 4;
      gamma = in__.vector(m);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(gamma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(gamma[(sym1__ - 1)], 0, lp__),
            "assigning variable gamma");
        } else {
          current_statement__ = 4;
          assign(gamma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(gamma[(sym1__ - 1)], 0),
            "assigning variable gamma");
        }}
      {
        current_statement__ = 5;
        validate_non_negative_index("loglik", "n", n);
        Eigen::Matrix<local_scalar_t__, -1, 1> loglik;
        loglik = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
        stan::math::fill(loglik, DUMMY_VAR__);
        
        current_statement__ = 7;
        validate_non_negative_index("lp_short", "q == 0 ? 0 : n",
                                    (logical_eq(q, 0) ? 0 : n));
        Eigen::Matrix<local_scalar_t__, -1, 1> lp_short;
        lp_short = Eigen::Matrix<local_scalar_t__, -1, 1>((logical_eq(q, 0) ?
                                                             0 : n));
        stan::math::fill(lp_short, DUMMY_VAR__);
        
        current_statement__ = 9;
        validate_non_negative_index("lp_long", "q == 0 ? 0 : n",
                                    (logical_eq(q, 0) ? 0 : n));
        Eigen::Matrix<local_scalar_t__, -1, 1> lp_long;
        lp_long = Eigen::Matrix<local_scalar_t__, -1, 1>((logical_eq(q, 0) ?
                                                            0 : n));
        stan::math::fill(lp_long, DUMMY_VAR__);
        
        current_statement__ = 11;
        validate_non_negative_index("lp_const", "p == 0 ? 0 : n",
                                    (logical_eq(p, 0) ? 0 : n));
        Eigen::Matrix<local_scalar_t__, -1, 1> lp_const;
        lp_const = Eigen::Matrix<local_scalar_t__, -1, 1>((logical_eq(p, 0) ?
                                                             0 : n));
        stan::math::fill(lp_const, DUMMY_VAR__);
        
        current_statement__ = 13;
        validate_non_negative_index("ratio", "n", n);
        Eigen::Matrix<local_scalar_t__, -1, 1> ratio;
        ratio = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
        stan::math::fill(ratio, DUMMY_VAR__);
        
        current_statement__ = 15;
        validate_non_negative_index("lht0", "n", n);
        Eigen::Matrix<local_scalar_t__, -1, 1> lht0;
        lht0 = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
        stan::math::fill(lht0, DUMMY_VAR__);
        
        current_statement__ = 16;
        assign(lht0, nil_index_list(),
          subtract(
            stan::math::log(
              rvalue(gamma, cons_list(index_multi(idt), nil_index_list()),
                "gamma")), stan::math::log(tau)), "assigning variable lht0");
        current_statement__ = 17;
        validate_non_negative_index("Ht0", "n", n);
        Eigen::Matrix<local_scalar_t__, -1, 1> Ht0;
        Ht0 = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
        stan::math::fill(Ht0, DUMMY_VAR__);
        
        current_statement__ = 18;
        assign(Ht0, nil_index_list(), multiply(ttt, gamma),
          "assigning variable Ht0");
        current_statement__ = 41;
        if (logical_eq(survreg, 1)) {
          current_statement__ = 36;
          assign(lp_short, nil_index_list(), multiply(Z, psi),
            "assigning variable lp_short");
          current_statement__ = 37;
          assign(lp_long, nil_index_list(), multiply(Z, phi),
            "assigning variable lp_long");
          current_statement__ = 38;
          assign(ratio, nil_index_list(),
            stan::math::exp(multiply(Z, subtract(psi, phi))),
            "assigning variable ratio");
          current_statement__ = 39;
          assign(loglik, nil_index_list(),
            loglik_yp1(status, lht0, Ht0, lp_short, lp_long, ratio, n,
              q, pstream__), "assigning variable loglik");
        } else {
          current_statement__ = 35;
          if (logical_eq(survreg, 2)) {
            current_statement__ = 29;
            assign(lp_short, nil_index_list(), multiply(Z, psi),
              "assigning variable lp_short");
            current_statement__ = 30;
            assign(lp_long, nil_index_list(), multiply(Z, phi),
              "assigning variable lp_long");
            current_statement__ = 31;
            assign(lp_const, nil_index_list(), multiply(X, beta),
              "assigning variable lp_const");
            current_statement__ = 32;
            assign(ratio, nil_index_list(),
              stan::math::exp(multiply(Z, subtract(psi, phi))),
              "assigning variable ratio");
            current_statement__ = 33;
            assign(loglik, nil_index_list(),
              loglik_yp2(status, lht0, Ht0, lp_short, lp_long, lp_const,
                ratio, n, q, pstream__), "assigning variable loglik");
          } else {
            current_statement__ = 28;
            if (logical_eq(survreg, 3)) {
              current_statement__ = 25;
              assign(lp_const, nil_index_list(), multiply(X, beta),
                "assigning variable lp_const");
              current_statement__ = 26;
              assign(loglik, nil_index_list(),
                loglik_ph(status, lht0, Ht0, lp_const, n, p, pstream__),
                "assigning variable loglik");
            } else {
              current_statement__ = 24;
              if (logical_eq(survreg, 4)) {
                current_statement__ = 21;
                assign(lp_const, nil_index_list(), multiply(X, beta),
                  "assigning variable lp_const");
                current_statement__ = 22;
                assign(loglik, nil_index_list(),
                  loglik_po(status, lht0, Ht0, lp_const, n, p, pstream__),
                  "assigning variable loglik");
              } else {
                current_statement__ = 19;
                assign(loglik, nil_index_list(),
                  subtract(elt_multiply(status, lht0), Ht0),
                  "assigning variable loglik");
              }
            }
          }
        }
        current_statement__ = 42;
        lp_accum__.add(sum(loglik));
        current_statement__ = 48;
        if (logical_eq(approach, 1)) {
          current_statement__ = 43;
          lp_accum__.add(lognormal_lpdf<propto__>(gamma, h1_gamma, h2_gamma));
          current_statement__ = 44;
          lp_accum__.add(normal_lpdf<propto__>(psi, mu_psi, sigma_psi));
          current_statement__ = 45;
          lp_accum__.add(normal_lpdf<propto__>(phi, mu_phi, sigma_phi));
          current_statement__ = 46;
          lp_accum__.add(normal_lpdf<propto__>(beta, mu_beta, sigma_beta));
        } 
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_yppe_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> psi;
      psi = Eigen::Matrix<double, -1, 1>(psi_1dim__);
      stan::math::fill(psi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      psi = in__.vector(psi_1dim__);
      Eigen::Matrix<double, -1, 1> phi;
      phi = Eigen::Matrix<double, -1, 1>(phi_1dim__);
      stan::math::fill(phi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      phi = in__.vector(phi_1dim__);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(beta_1dim__);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      beta = in__.vector(beta_1dim__);
      Eigen::Matrix<double, -1, 1> gamma;
      gamma = Eigen::Matrix<double, -1, 1>(m);
      stan::math::fill(gamma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      gamma = in__.vector(m);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 4;
        assign(gamma, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(gamma[(sym1__ - 1)], 0),
          "assigning variable gamma");}
      for (int sym1__ = 1; sym1__ <= psi_1dim__; ++sym1__) {
        vars__.emplace_back(psi[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        vars__.emplace_back(phi[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        vars__.emplace_back(gamma[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> psi;
      psi = Eigen::Matrix<double, -1, 1>(psi_1dim__);
      stan::math::fill(psi, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> psi_flat__;
        current_statement__ = 1;
        assign(psi_flat__, nil_index_list(), context__.vals_r("psi"),
          "assigning variable psi_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= psi_1dim__; ++sym1__) {
          current_statement__ = 1;
          assign(psi, cons_list(index_uni(sym1__), nil_index_list()),
            psi_flat__[(pos__ - 1)], "assigning variable psi");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> phi;
      phi = Eigen::Matrix<double, -1, 1>(phi_1dim__);
      stan::math::fill(phi, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> phi_flat__;
        current_statement__ = 2;
        assign(phi_flat__, nil_index_list(), context__.vals_r("phi"),
          "assigning variable phi_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
          current_statement__ = 2;
          assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
            phi_flat__[(pos__ - 1)], "assigning variable phi");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(beta_1dim__);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 3;
        assign(beta_flat__, nil_index_list(), context__.vals_r("beta"),
          "assigning variable beta_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
          current_statement__ = 3;
          assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
            beta_flat__[(pos__ - 1)], "assigning variable beta");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> gamma;
      gamma = Eigen::Matrix<double, -1, 1>(m);
      stan::math::fill(gamma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gamma_flat__;
        current_statement__ = 4;
        assign(gamma_flat__, nil_index_list(), context__.vals_r("gamma"),
          "assigning variable gamma_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
          current_statement__ = 4;
          assign(gamma, cons_list(index_uni(sym1__), nil_index_list()),
            gamma_flat__[(pos__ - 1)], "assigning variable gamma");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> gamma_free__;
      gamma_free__ = Eigen::Matrix<double, -1, 1>(m);
      stan::math::fill(gamma_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 4;
        assign(gamma_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(gamma[(sym1__ - 1)], 0),
          "assigning variable gamma_free__");}
      for (int sym1__ = 1; sym1__ <= psi_1dim__; ++sym1__) {
        vars__.emplace_back(psi[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        vars__.emplace_back(phi[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        vars__.emplace_back(gamma_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("psi");
    names__.emplace_back("phi");
    names__.emplace_back("beta");
    names__.emplace_back("gamma");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(psi_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(phi_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(beta_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(m)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= psi_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= psi_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"psi\",\"type\":{\"name\":\"vector\",\"length\":" << psi_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" << phi_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << beta_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" << m << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"psi\",\"type\":{\"name\":\"vector\",\"length\":" << psi_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" << phi_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << beta_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" << m << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_yppe_namespace::model_yppe;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_yppe_namespace::profiles__;
}
#endif
#endif
