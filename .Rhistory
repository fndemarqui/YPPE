devtools::load_all()
#devtools::install()
devtools::install(quick=TRUE)
devtools::document()
library(YPPE)
mle <- yppe(Surv(time, status)~arm, data=ipass, approach="mle", n_int=10)
t_mle <- crossTime(mle, newdata1, newdata2, nboot=100)
newdata1 <- data.frame(arm=0)
newdata2 <- data.frame(arm=1)
t_mle <- crossTime(mle, newdata1, newdata2, nboot=100)
t_mle
library("crossSurv")
yppe_mle <- yppe(Surv(time, status)~trt, data=gastric, approach="mle")
yppe_bayes <- yppe(Surv(time, status)~trt, data=gastric, approach="bayes")
ypbp_mle1 <- ypbp(Surv(time, status)~trt, data=gastric, approach="mle", baseline="hazard")
summary(mle)
summary(bayes)
newdata1 <- data.frame(trt=0)
newdata2 <- data.frame(trt=1)
t_mle <- crossTime(mle, newdata1, newdata2)
mle <- yppe(Surv(time, status)~trt, data=gastric, approach="mle")
bayes <- yppe(Surv(time, status)~trt, data=gastric, approach="bayes")
mle <- yppe(Surv(time, status)~trt, data=gastric, approach="mle")
library("YPPE")
mle <- yppe(Surv(time, status)~trt, data=gastric, approach="mle")
remove.packages("crossSurv")
library("YPPE")
mle <- yppe(Surv(time, status)~trt, data=gastric, approach="mle")
bayes <- yppe(Surv(time, status)~trt, data=gastric, approach="bayes")
library("YPPE")
mle <- yppe(Surv(time, status)~trt, data=gastric, approach="mle")
bayes <- yppe(Surv(time, status)~trt, data=gastric, approach="bayes")
summary(mle)
summary(bayes)
newdata1 <- data.frame(trt=0)
newdata2 <- data.frame(trt=1)
t_mle <- crossTime(mle, newdata1, newdata2)
t_bayes <- crossTime(bayes, newdata1, newdata2)
t_mle
t_bayes
newdata <- data.frame(trt=as.factor(0:1))
St_mle <- survfit(mle, newdata)
St_bayes <- survfit(bayes, newdata)
ekm <- survfit(Surv(time, status)~trt, data=gastric)
plot(ekm, col=1:2)
time <- gastric$time
lines(time, St_mle[[1]])
lines(time, St_mle[[2]], col=2)
lines(time, St_bayes[[1]], lty=2)
lines(time, St_bayes[[2]], col=2, lty=2)
abline(v=t_mle, col="blue")
abline(v=t_bayes, col="green")
dim(ipass)
devtools::document()
?ipass
devtools::document()
?ipass
devtools::document()
?ipass
?lung
library(peppm)
library("peppm")
devtools::install_github("peppm")
devtools::install_github("fndemarqui/peppm")
library(peppm)
?telecom
devtools::document()
?ipass
?ipass
devtools::document()
?ipass
devtools::document()
?ipass
devtools::check()
devtools::document()
# devtools::check_win_devel()
devtools::spell_check()
devtools::missing_s3()
devtools::release_checks()
usethis::use_build_ignore(c("script_development.R", "script_ipass.R"))
library(YPPE)
mle <- yppe(Surv(time, status)~arm, data=ipass, approach="mle")
summary(mle)
bayes <- yppe(Surv(time, status)~arm, data=ipass,
approach="bayes", chains=1, iter=1000)
summary(bayes)
devtools::test()
bayes <- yppe(Surv(time, status)~arm, data=ipass,
approach="bayes", chains=1, iter=100)
summary(bayes)
devtools::document()
?survfit
devtools::document()
?survfit.yppe
?survfit
?survfit
devtools::document()
?survfit.yppe
devtools::document()
library(YPPE)
mle <- yppe(Surv(time, status)~arm, data=ipass, approach="mle", n_int=10)
summary(mle)
newdata1 <- data.frame(arm=0)
newdata2 <- data.frame(arm=1)
newdata <- data.frame(arm=as.factor(0:1))
St_mle <- survfit(mle, newdata)
vaca <- survfit(mle, newdata)
vaca
devtools::document()
?crossTime.yppe
devtools::document()
?crossTime.yppe
devtools::document()
?crossTime.yppe
devtools::document()
?survfit.yppe
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build()
# devtools::reload()
devtools::run_examples()
t_mle <- crossTime(mle, newdata1, newdata2, nboot=10)
?crossTime
?crossTime.yppe
devtools::document()
t_mle <- crossTime(mle, newdata1, newdata2, nboot=10)
t_mle
crossTime(mle, newdata1, newdata2, nboot=10, conf.level=0.9)
# devtools::reload()
devtools::run_examples()
remove.packages("peppm", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
# devtools::reload()
devtools::run_examples()
devtools::document()
# devtools::reload()
devtools::run_examples()
packrat::init()
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::release()
devtools::dev_sitrep()
install.packages(c("curl", "DT", "knitr", "tinytex"))
devtools::dev_sitrep()
devtools::release()
devtools::build()
devtools::build_manual()
devtools::build_site()
devtools::document()
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build()
devtools::build_manual()
devtools::release("YPPE", check = TRUE)
devtools::release(YPPE, check = TRUE)
devtools::release(check = TRUE)
release(pkg = ".", check = TRUE, args = NULL)
devtools::release(pkg = ".", check = TRUE, args = NULL)
help("devtools-deprecated")
dr_devtools()
devtools::dr_devtools()
?devtools::release()
usethis::use_release_issue(version = NULL)
release()
devtools::release()
devtools::devtest()
devtools::check_failures()
devtools::submit_cran()
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build_manual()
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build()
devtools::build_manual()
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build()
devtools::build_manual()
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build()
devtools::build_manual()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build()
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
# devtools::reload()
devtools::run_examples()
#usethis::use_build_ignore(c("script_development.R", "script_ipass.R"))
# devtools::reload()
devtools::run_examples()
devtools::test()
devtools::test()
devtools::run_examples()
devtools::document()
devtools::run_examples()
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build()
devtools::release_checks()
devtools::test()
devtools::run_examples()
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build()
devtools::release_checks()
devtools::test()
devtools::run_examples()
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build()
devtools::release_checks()
devtools::test()
devtools::run_examples()
devtools::check()
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build()
devtools::release_checks()
devtools::test()
devtools::run_examples()
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build()
devtools::release_checks()
devtools::test()
devtools::run_examples()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::load_all()
devtools::document()
devtools::document()
methods("survfit")
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build()
devtools::release_checks()
devtools::test()
devtools::run_examples()
devtools::run_examples()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::check()
# This is borrowed from: https://github.com/klutometis/roxygen/issues/623
register_s3_method <- function(pkg, generic, class, fun = NULL) {
stopifnot(is.character(pkg), length(pkg) == 1)
envir <- asNamespace(pkg)
stopifnot(is.character(generic), length(generic) == 1)
stopifnot(is.character(class), length(class) == 1)
if (is.null(fun)) {
fun <- get(paste0(generic, ".", class), envir = parent.frame())
}
stopifnot(is.function(fun))
if (pkg %in% loadedNamespaces()) {
registerS3method(generic, class, fun, envir = envir)
}
# Always register hook in case package is later unloaded & reloaded
setHook(
packageEvent(pkg, "onLoad"),
function(...) {
registerS3method(generic, class, fun, envir = envir)
}
)
}
register_s3_method("YPPE", "survfit", "yppe", fun = NULL)
devtools::document()
devtools::missing_s3()
devtools::missing_s3()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
methods(survfit)
devtools::document()
devtools::document()
?survfit
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?survfit
roxygen2::is_s3_generic(name, env = parent.frame())
roxygen2::is_s3_generic(survfit, env = parent.frame())
roxygen2::is_s3_generic("survfit", env = parent.frame())
roxygen2::is_s3_method("survfit", env = parent.frame())
roxygen2::is_s3_method("survfit.yppe", env = parent.frame())
devtools::document()
roxygen2::is_s3_generic("survfit", env = parent.frame())
roxygen2::is_s3_method("survfit.yppe", env = parent.frame())
## registering in the "survival" package
registerS3method("survfit", "yppe", "survfit.yppe", envir=getNamespace("survival"))
?registerS3method
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build()
devtools::release_checks()
devtools::test()
devtools::run_examples()
install.packages("rstantools")
install.packages("rstantools")
install.packages("rstantools", dependencies=TRUE)
devtools::run_examples()
devtools::run_examples()
devtools::document()
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build()
devtools::release_checks()
devtools::release_checks()
devtools::test()
devtools::load_all()
devtools::document()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build()
devtools::release_checks()
devtools::test()
devtools::build_manual()
devtools::check_built()
devtools::check()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::check()
library(rstan)
citation("rstan")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install(quick = TRUE)
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build()
devtools::release_checks()
devtools::test()
devtools::load_all()
devtools::release_checks()
devtools::test()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::load_all()
devtools::document()
#devtools::install()
devtools::install(quick=TRUE)
devtools::build()
devtools::release_checks()
devtools::test()
#devtools::build_vignettes()
devtools::check()
devtools::check_win_devel()
devtools::build_manual()
devtools::submit_cran()
