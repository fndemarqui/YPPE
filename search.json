[{"path":"https://fndemarqui.github.io/YPPE/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 YPPE authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://fndemarqui.github.io/YPPE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabio Demarqui. Author, maintainer, copyright holder.","code":""},{"path":"https://fndemarqui.github.io/YPPE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Demarqui F (2023). YPPE: Yang Prentice Model Piecewise Exponential Baseline Distribution. R package version 1.1.0, https://fndemarqui.github.io/YPPE/.","code":"@Manual{,   title = {YPPE: Yang and Prentice Model with Piecewise Exponential Baseline Distribution},   author = {Fabio Demarqui},   year = {2023},   note = {R package version 1.1.0},   url = {https://fndemarqui.github.io/YPPE/}, }"},{"path":"https://fndemarqui.github.io/YPPE/index.html","id":"yppe","dir":"","previous_headings":"","what":"Yang and Prentice Model with Piecewise Exponential Baseline Distribution","title":"Yang and Prentice Model with Piecewise Exponential Baseline Distribution","text":"R package YPPE provides semiparametric modeling lifetime data crossing survival curves via Yang Prentice model piecewise exponential baseline distribution. Details model can found Demarqui Mayrink (2019) <doi.org/10.1214/20-BJPS471>. Model fitting carried via likelihood-based Bayesian approaches. package also provides point interval estimation crossing survival times.","code":""},{"path":"https://fndemarqui.github.io/YPPE/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Yang and Prentice Model with Piecewise Exponential Baseline Distribution","text":"can install released version YPPE CRAN : development version GitHub :","code":"install.packages(\"YPPE\") install.packages(\"remotes\") remotes::install_github(\"fndemarqui/YPPE\")"},{"path":"https://fndemarqui.github.io/YPPE/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Yang and Prentice Model with Piecewise Exponential Baseline Distribution","text":"basic example shows solve common problem:","code":"library(YPPE) #> Loading required package: survival  data(gastric)  # MLE approach: mle <- yppe(Surv(time, status)~trt, data=gastric,              approach = \"mle\", init = 0, n_int = 10) summary(mle) #> Call: #> yppe(formula = Surv(time, status) ~ trt, data = gastric, n_int = 10,  #>     approach = \"mle\", init = 0) #>  #> Short-term coefficients: #>     Estimate  StdErr z.value  p.value    #> trt  1.77113 0.61843  2.8639 0.004185 ** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Long-term coefficients: #>     Estimate   StdErr z.value   p.value     #> trt -0.98230  0.29576 -3.3212 0.0008962 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ---  #> loglik = -582.5366   AIC = 1189.073  # Bayesian approach: bayes <- yppe(Surv(time, status)~trt, data=gastric,                approach = \"bayes\", n_int = 10,                refresh = FALSE)  summary(bayes) #> Call: #> yppe(formula = Surv(time, status) ~ trt, data = gastric, n_int = 10,  #>     approach = \"bayes\", refresh = FALSE) #>  #> Short-term coefficients: #>      mean se_mean    sd  2.5%   25%   50%   75% 97.5%    n_eff  Rhat #> trt 1.831   0.016 0.626 0.654 1.394 1.806 2.243 3.154 1599.978 1.001 #>  #> Long-term coefficients: #>       mean se_mean    sd   2.5%    25%    50%    75%  97.5%    n_eff Rhat #> trt -0.971   0.007 0.316 -1.554 -1.192 -0.983 -0.778 -0.295 2062.186    1 #>  #> ---  #> Inference for Stan model: yppe. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000."},{"path":"https://fndemarqui.github.io/YPPE/reference/AIC.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"Akaike information criterion — AIC.yppe","title":"Akaike information criterion — AIC.yppe","text":"Akaike information criterion","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/AIC.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Akaike information criterion — AIC.yppe","text":"","code":"# S3 method for yppe AIC(object, ..., k = 2)"},{"path":"https://fndemarqui.github.io/YPPE/reference/AIC.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Akaike information criterion — AIC.yppe","text":"object object class yppe. ... arguments passed methods. k numeric, penalty per parameter used; default k = 2 classical AIC.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/AIC.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Akaike information criterion — AIC.yppe","text":"Akaike information criterion","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/YPPE-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'YPPE' package. — YPPE-package","title":"The 'YPPE' package. — YPPE-package","text":"Semiparametric modeling lifetime data crossing survival curves via Yang Prentice model piecewise exponential baseline distribution. Details model can found (Demarqui Mayrink 2021)  <doi.org/10.1214/20-BJPS471>. Model fitting carried via likelihood-based Bayesian approaches. package also provides point interval estimation crossing survival times.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/YPPE-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The 'YPPE' package. — YPPE-package","text":"Demarqui FN, Mayrink VD (2021). “Yang Prentice model piecewise exponential baseline distribution modeling lifetime data crossing survival curves.” Brazilian Journal Probability Statistics, 35(1), 172 -- 186. doi:10.1214/20-BJPS471 . Yang S, Prentice RL (2005). “Semiparametric analysis short-term long-term hazard ratios two-sample survival data.” Biometrika, 92(1), 1-17. Stan Development Team (2019). RStan: R interface Stan. R package version 2.19.2. https://mc-stan.org","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/anova.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"anova method for yppe models — anova.yppe","title":"anova method for yppe models — anova.yppe","text":"Compute analysis variance (deviance) tables one fitted model objects.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/anova.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"anova method for yppe models — anova.yppe","text":"","code":"# S3 method for yppe anova(...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/anova.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"anova method for yppe models — anova.yppe","text":"... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/anova.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"anova method for yppe models — anova.yppe","text":"ANOVA table.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/coef.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimated regression coefficients — coef.yppe","title":"Estimated regression coefficients — coef.yppe","text":"function returns estimated regression coefficients maximum likelihood estimation approach used model fitting.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/coef.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimated regression coefficients — coef.yppe","text":"","code":"# S3 method for yppe coef(object, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/coef.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimated regression coefficients — coef.yppe","text":"object object class yppe. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/coef.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimated regression coefficients — coef.yppe","text":"estimated regression coefficients.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/coef.yppe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimated regression coefficients — coef.yppe","text":"","code":"if (FALSE) { fit <- yppe(Surv(time, status)~arm, data=ipass, init = 0) coef(fit) }"},{"path":"https://fndemarqui.github.io/YPPE/reference/confint.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence intervals for the regression coefficients — confint.yppe","title":"Confidence intervals for the regression coefficients — confint.yppe","text":"Confidence intervals regression coefficients","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/confint.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence intervals for the regression coefficients — confint.yppe","text":"","code":"# S3 method for yppe confint(object, parm = NULL, level = 0.95, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/confint.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence intervals for the regression coefficients — confint.yppe","text":"object object class yppe. parm specification parameters given confidence intervals, either vector numbers vector names. missing, parameters considered. level confidence level required. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/confint.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence intervals for the regression coefficients — confint.yppe","text":"100(1-alpha) confidence intervals regression coefficients.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/crossTime-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the crossing survival times — crossTime.yppe","title":"Computes the crossing survival times — crossTime.yppe","text":"Computes crossing survival times","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/crossTime-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the crossing survival times — crossTime.yppe","text":"","code":"# S3 method for yppe crossTime(object, newdata1, newdata2, conf.level = 0.95, nboot = 1000, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/crossTime-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the crossing survival times — crossTime.yppe","text":"object object class yppe newdata1 data frame containing first set explanatory variables newdata2 data frame containing second set explanatory variables conf.level level confidence/credible intervals nboot number bootstrap samples (default nboot=1000); ignored approach=\"bayes\". ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/crossTime-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the crossing survival times — crossTime.yppe","text":"crossing survival time","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/crossTime-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes the crossing survival times — crossTime.yppe","text":"","code":"# \\donttest{ # ML approach: library(YPPE) mle <- yppe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"mle\", init = 0) summary(mle) #> Call: #> yppe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"mle\", init = 0) #>  #> Short-term coefficients: #>     Estimate  StdErr z.value   p.value     #> arm  1.04152 0.16656  6.2533 4.019e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Long-term coefficients: #>     Estimate   StdErr z.value   p.value     #> arm -1.23838  0.08456 -14.645 < 2.2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> ---  #> loglik = -2759.652   AIC = 5543.305  newdata1 <- data.frame(arm=0) newdata2 <- data.frame(arm=1) tcross <- crossTime(mle, newdata1, newdata2, nboot = 10) tcross #>       Est. 2.5% 97.5% #> 1 5.883294   NA    NA ekm <- survfit(Surv(time, status)~arm, data=ipass) newdata <- data.frame(arm=0:1) St <- survfit(mle, newdata) plot(ekm, col=1:2) with(St, lines(time, surv[[1]])) with(St, lines(time, surv[[2]], col=2)) abline(v=tcross, col=\"blue\")   # Bayesian approach: bayes <- yppe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"bayes\", chains=1, iter=10) #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000804 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.04 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: No variance estimation is #> Chain 1:          performed for num_warmup < 20 #> Chain 1:  #> Chain 1: Iteration: 1 / 10 [ 10%]  (Warmup) #> Chain 1: Iteration: 2 / 10 [ 20%]  (Warmup) #> Chain 1: Iteration: 3 / 10 [ 30%]  (Warmup) #> Chain 1: Iteration: 4 / 10 [ 40%]  (Warmup) #> Chain 1: Iteration: 5 / 10 [ 50%]  (Warmup) #> Chain 1: Iteration: 6 / 10 [ 60%]  (Sampling) #> Chain 1: Iteration: 7 / 10 [ 70%]  (Sampling) #> Chain 1: Iteration: 8 / 10 [ 80%]  (Sampling) #> Chain 1: Iteration: 9 / 10 [ 90%]  (Sampling) #> Chain 1: Iteration: 10 / 10 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.014 seconds (Warm-up) #> Chain 1:                0.019 seconds (Sampling) #> Chain 1:                0.033 seconds (Total) #> Chain 1:  #> Warning: There were 1 chains where the estimated Bayesian Fraction of Missing Information was low. See #> https://mc-stan.org/misc/warnings.html#bfmi-low #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: The largest R-hat is 2.5, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat summary(bayes) #> Call: #> yppe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"bayes\", chains = 1, iter = 10) #>  #> Short-term coefficients: #>      mean se_mean   sd   2.5%    25%    50%   75% 97.5% n_eff  Rhat #> arm 0.125    0.15 0.28 -0.146 -0.035 -0.035 0.427 0.427 3.495 0.817 #>  #> Long-term coefficients: #>      mean se_mean    sd   2.5%   25%   50%   75% 97.5% n_eff  Rhat #> arm 0.886   0.523 0.978 -0.646 1.312 1.312 1.335 1.335 3.495 1.011 #>  #> ---  #> Inference for Stan model: yppe. #> 1 chains, each with iter=10; warmup=5; thin=1;  #> post-warmup draws per chain=5, total post-warmup draws=5. #>  newdata1 <- data.frame(arm=0) newdata2 <- data.frame(arm=1) tcross <- crossTime(bayes, newdata1, newdata2) tcross #>       Est.     2.5%    97.5% #> 1 1.526788 1.526788 1.526788 ekm <- survfit(Surv(time, status)~arm, data=ipass) newdata <- data.frame(arm=0:1) St <- survfit(bayes, newdata) plot(ekm, col=1:2) with(St, lines(time, surv[[1]])) with(St, lines(time, surv[[2]], col=2)) abline(v=tcross, col=\"blue\")  # }"},{"path":"https://fndemarqui.github.io/YPPE/reference/crossTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method crossTime — crossTime","title":"Generic S3 method crossTime — crossTime","text":"Generic S3 method crossTime","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/crossTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method crossTime — crossTime","text":"","code":"crossTime(object, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/crossTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method crossTime — crossTime","text":"object fitted model object ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/crossTime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic S3 method crossTime — crossTime","text":"crossing survival time","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/gastric.html","id":null,"dir":"Reference","previous_headings":"","what":"Gastric cancer data set — gastric","title":"Gastric cancer data set — gastric","text":"Data set clinical trial conducted Gastrointestinal Tumor Study Group (GTSG) 1982. data set refers survival times patients locally nonresectable gastric cancer. Patients either treated chemotherapy combined radiation chemotherapy alone.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/gastric.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gastric cancer data set — gastric","text":"data frame 90 rows 3 variables: time: survival times (days) status: failure indicator (1 - failure; 0 - otherwise) trt: treatments (1 - chemotherapy + radiation; 0 - chemotherapy alone)","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/gastric.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gastric cancer data set — gastric","text":"Gastrointestinal Tumor Study Group. (1982) Comparison Combination Chemotherapy Combined Modality Therapy Locally Advanced Gastric Carcinoma. Cancer 49:1771-7.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/gastric.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gastric cancer data set — gastric","text":"Fabio N. Demarqui fndemarqui@est.ufmg.br","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/ipass.html","id":null,"dir":"Reference","previous_headings":"","what":"IRESSA Pan-Asia Study (IPASS) data set — ipass","title":"IRESSA Pan-Asia Study (IPASS) data set — ipass","text":"Reconstructed IPASS clinical trial data reported Argyropoulos Unruh (2015). Although reconstructed, data set preserves features exhibited references full access observations clinical trial. data base related period March 2006 April 2008. main purpose study compare drug gefitinib carboplatin/paclitaxel doublet chemotherapy first line treatment, terms progression free survival (months), applied selected non-small-cell lung cancer (NSCLC) patients.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/ipass.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"IRESSA Pan-Asia Study (IPASS) data set — ipass","text":"data frame 1217 rows 3 variables: time: progression free survival (months) status: failure indicator (1 - failure; 0 - otherwise) arm: (1 - gefitinib; 0 - carboplatin/paclitaxel doublet chemotherapy)","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/ipass.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"IRESSA Pan-Asia Study (IPASS) data set — ipass","text":"Argyropoulos, C. Unruh, M. L. (2015). Analysis time event outcomes randomized controlled trials generalized additive models. PLOS One 10, 1-33.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/ipass.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"IRESSA Pan-Asia Study (IPASS) data set — ipass","text":"Fabio N. Demarqui fndemarqui@est.ufmg.br","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/logLik.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Log-Likelihood — logLik.yppe","title":"Extract Log-Likelihood — logLik.yppe","text":"Extract Log-Likelihood","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/logLik.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Log-Likelihood — logLik.yppe","text":"","code":"# S3 method for yppe logLik(object, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/logLik.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Log-Likelihood — logLik.yppe","text":"object object class yppe. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/logLik.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Log-Likelihood — logLik.yppe","text":"log-likelihood associated fitted model.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/model.matrix.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"Model.matrix method for yppe models — model.matrix.yppe","title":"Model.matrix method for yppe models — model.matrix.yppe","text":"Reconstruct model matrix (matrices alternative formulation YP model used) yppe model.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/model.matrix.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model.matrix method for yppe models — model.matrix.yppe","text":"","code":"# S3 method for yppe model.matrix(object, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/model.matrix.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model.matrix method for yppe models — model.matrix.yppe","text":"object object class yppe. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/model.matrix.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model.matrix method for yppe models — model.matrix.yppe","text":"model matrix (matrices) fit.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/model.matrix.yppe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model.matrix method for yppe models — model.matrix.yppe","text":"","code":"if (FALSE) { fit <- yppe(Surv(time, status)~arm, data=ipass) model.matrix(fit) }"},{"path":"https://fndemarqui.github.io/YPPE/reference/pehaz.html","id":null,"dir":"Reference","previous_headings":"","what":"Hazard and cumulative hazard functions of the PE distribution — pehaz","title":"Hazard and cumulative hazard functions of the PE distribution — pehaz","text":"Hazard cumulative hazard functions PE distribution","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/pehaz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hazard and cumulative hazard functions of the PE distribution — pehaz","text":"","code":"hpexp(x, rho, rates)  Hpexp(x, rho, rates)"},{"path":"https://fndemarqui.github.io/YPPE/reference/pehaz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hazard and cumulative hazard functions of the PE distribution — pehaz","text":"x vector time points. rho vector time grid knots. rates vector failure rates.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/pehaz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hazard and cumulative hazard functions of the PE distribution — pehaz","text":"hpexp gives hazard function Hpexp gives cumulative hazard function PE distribution.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/pexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability function, distribution function, quantile function and random generation for the Piecewise Exponential (PE) distribution. — pexp","title":"Probability function, distribution function, quantile function and random generation for the Piecewise Exponential (PE) distribution. — pexp","text":"Probability function, distribution function, quantile function random generation Piecewise Exponential (PE) distribution.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/pexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability function, distribution function, quantile function and random generation for the Piecewise Exponential (PE) distribution. — pexp","text":"","code":"dpexp(x, rho, rates, log = FALSE)  ppexp(q, rho, rates, lower.tail = TRUE, log.p = FALSE)  qpexp(p, rho, rates, lower.tail = TRUE, log.p = FALSE)  rpexp(n, rho, rates)"},{"path":"https://fndemarqui.github.io/YPPE/reference/pexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability function, distribution function, quantile function and random generation for the Piecewise Exponential (PE) distribution. — pexp","text":"x vector time points. rho vector time grid knots. rates vector failure rates. log, log.p logical; TRUE, probabilities p given log(p). q vector quantiles. lower.tail logical; TRUE (default), probabilities \\(P[X \\le x]\\); otherwise, \\(P[X > x]\\). p vector probabilities. n number random values return.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/pexp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability function, distribution function, quantile function and random generation for the Piecewise Exponential (PE) distribution. — pexp","text":"dpexp gives (log) probability function, ppexp gives (log) distribution function, qpexp gives quantile function, rpexp generates random deviates.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/pexp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability function, distribution function, quantile function and random generation for the Piecewise Exponential (PE) distribution. — pexp","text":"","code":"n <- 10 rho <- c(0, 1, 3, 7, Inf) rates <- c(0.5, 4, 0.8, 0.1) x <- sort(rpexp(n, rho=rho, rates=rates)) Fx <- ppexp(x, rho, rates) y <- qpexp(Fx, rho, rates) # checking: x==y #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"},{"path":"https://fndemarqui.github.io/YPPE/reference/phpe.html","id":null,"dir":"Reference","previous_headings":"","what":"phpe: Fit Proportional Hazards Regression Model with Piecewise Exponential baseline distribution. — phpe","title":"phpe: Fit Proportional Hazards Regression Model with Piecewise Exponential baseline distribution. — phpe","text":"phpe: Fit Proportional Hazards Regression Model Piecewise Exponential baseline distribution.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/phpe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"phpe: Fit Proportional Hazards Regression Model with Piecewise Exponential baseline distribution. — phpe","text":"","code":"phpe(   formula,   data,   n_int = NULL,   rho = NULL,   tau = NULL,   hessian = TRUE,   approach = c(\"mle\", \"bayes\"),   hyper_parms = list(h1_gamma = 0, h2_gamma = 4, mu_beta = 0, sigma_beta = 4),   ... )"},{"path":"https://fndemarqui.github.io/YPPE/reference/phpe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"phpe: Fit Proportional Hazards Regression Model with Piecewise Exponential baseline distribution. — phpe","text":"formula object class \"formula\" (one can coerced class): symbolic description model fitted. data optional data frame, list environment (object coercible .data.frame data frame) containing variables model. found data, variables taken environment(formula), typically environment phpe called. n_int number intervals PE distribution. NULL, default value (square root n) used. rho time grid PE distribution. NULL, function timeGrid used compute rho. tau maximum time follow-. NULL, tau = max(time), time vector observed survival times. hessian logical; TRUE (default), hessian matrix returned approach=\"mle\". approach approach used fit model (mle: maximum likelihood; bayes: Bayesian approach). hyper_parms list containing hyper-parameters prior distributions (approach = \"bayes\"). specified, default values used. ... Arguments passed either `rstan::optimizing` `rstan::sampling` .","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/phpe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"phpe: Fit Proportional Hazards Regression Model with Piecewise Exponential baseline distribution. — phpe","text":"phpe returns object class \"phpe\" containing fitted model.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/phpe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"phpe: Fit Proportional Hazards Regression Model with Piecewise Exponential baseline distribution. — phpe","text":"","code":"# \\donttest{ # ML approach: library(YPPE) mle <- phpe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"mle\") summary(mle) #> Call: #> phpe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"mle\") #>  #> Proportional hazards coefficients: #>      Estimate    StdErr z.value   p.value     #> arm -0.310926  0.066011 -4.7102 2.475e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> ---  #> loglik = -2810.835   AIC = 5643.671   # Bayesian approach: bayes <- phpe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"bayes\") #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000373 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 3.73 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 2.38 seconds (Warm-up) #> Chain 1:                2.212 seconds (Sampling) #> Chain 1:                4.592 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.000314 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 3.14 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 2.507 seconds (Warm-up) #> Chain 2:                2.186 seconds (Sampling) #> Chain 2:                4.693 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.000308 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 3.08 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 2.372 seconds (Warm-up) #> Chain 3:                2.195 seconds (Sampling) #> Chain 3:                4.567 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.000344 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 3.44 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 2.509 seconds (Warm-up) #> Chain 4:                2.237 seconds (Sampling) #> Chain 4:                4.746 seconds (Total) #> Chain 4:  summary(bayes) #> Call: #> phpe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"bayes\") #>  #> Proportional hazards coefficients: #>       mean se_mean    sd   2.5%    25%    50%    75%  97.5%   n_eff Rhat #> arm -0.311   0.001 0.066 -0.442 -0.356 -0.311 -0.265 -0.185 3636.82    1 #> ---  #> Inference for Stan model: yppe. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  # }"},{"path":"https://fndemarqui.github.io/YPPE/reference/pope.html","id":null,"dir":"Reference","previous_headings":"","what":"pope: Fit Proportional Odds Regression Model with Piecewise Exponential baseline distribution. — pope","title":"pope: Fit Proportional Odds Regression Model with Piecewise Exponential baseline distribution. — pope","text":"pope: Fit Proportional Odds Regression Model Piecewise Exponential baseline distribution.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/pope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pope: Fit Proportional Odds Regression Model with Piecewise Exponential baseline distribution. — pope","text":"","code":"pope(   formula,   data,   n_int = NULL,   rho = NULL,   tau = NULL,   hessian = TRUE,   approach = c(\"mle\", \"bayes\"),   hyper_parms = list(h1_gamma = 0, h2_gamma = 4, mu_beta = 0, sigma_beta = 4),   ... )"},{"path":"https://fndemarqui.github.io/YPPE/reference/pope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pope: Fit Proportional Odds Regression Model with Piecewise Exponential baseline distribution. — pope","text":"formula object class \"formula\" (one can coerced class): symbolic description model fitted. data optional data frame, list environment (object coercible .data.frame data frame) containing variables model. found data, variables taken environment(formula), typically environment pope called. n_int number intervals PE distribution. NULL, default value (square root n) used. rho time grid PE distribution. NULL, function timeGrid used compute rho. tau maximum time follow-. NULL, tau = max(time), time vector observed survival times. hessian logical; TRUE (default), hessian matrix returned approach=\"mle\". approach approach used fit model (mle: maximum likelihood; bayes: Bayesian approach). hyper_parms list containing hyper-parameters prior distributions (approach = \"bayes\"). specified, default values used. ... Arguments passed either `rstan::optimizing` `rstan::sampling` .","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/pope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pope: Fit Proportional Odds Regression Model with Piecewise Exponential baseline distribution. — pope","text":"pope returns object class \"pope\" containing fitted model.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/pope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pope: Fit Proportional Odds Regression Model with Piecewise Exponential baseline distribution. — pope","text":"","code":"# \\donttest{ # ML approach: library(YPPE) mle <- pope(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"mle\") summary(mle) #> Call: #> pope(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"mle\") #>  #> Proportional odds coefficients: #>      Estimate    StdErr z.value p.value #> arm -0.051702  0.103114 -0.5014  0.6161 #>  #> ---  #> loglik = -2821.851   AIC = 5665.702   # Bayesian approach: bayes <- pope(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"bayes\") #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000534 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 5.34 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 3.691 seconds (Warm-up) #> Chain 1:                3.589 seconds (Sampling) #> Chain 1:                7.28 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.000483 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 4.83 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 3.723 seconds (Warm-up) #> Chain 2:                3.62 seconds (Sampling) #> Chain 2:                7.343 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.000444 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 4.44 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 3.77 seconds (Warm-up) #> Chain 3:                3.495 seconds (Sampling) #> Chain 3:                7.265 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.000482 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 4.82 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 3.792 seconds (Warm-up) #> Chain 4:                3.607 seconds (Sampling) #> Chain 4:                7.399 seconds (Total) #> Chain 4:  summary(bayes) #> Call: #> pope(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"bayes\") #>  #> Proportional hazards coefficients: #>       mean se_mean    sd   2.5%   25%    50%   75% 97.5%    n_eff Rhat #> arm -0.049   0.002 0.107 -0.257 -0.12 -0.049 0.023  0.16 4362.482    1 #> ---  #> Inference for Stan model: yppe. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  # }"},{"path":"https://fndemarqui.github.io/YPPE/reference/print.summary.phpe.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the summary.phpe output — print.summary.phpe","title":"Print the summary.phpe output — print.summary.phpe","text":"Print summary.phpe output","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/print.summary.phpe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the summary.phpe output — print.summary.phpe","text":"","code":"# S3 method for summary.phpe print(x, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/print.summary.phpe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the summary.phpe output — print.summary.phpe","text":"x object class summary.phpe. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/print.summary.phpe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the summary.phpe output — print.summary.phpe","text":"summary fitted model.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/print.summary.pope.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the summary.pope output — print.summary.pope","title":"Print the summary.pope output — print.summary.pope","text":"Print summary.pope output","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/print.summary.pope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the summary.pope output — print.summary.pope","text":"","code":"# S3 method for summary.pope print(x, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/print.summary.pope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the summary.pope output — print.summary.pope","text":"x object class summary.pope. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/print.summary.pope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the summary.pope output — print.summary.pope","text":"summary fitted model.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/print.summary.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the summary.yppe output — print.summary.yppe","title":"Print the summary.yppe output — print.summary.yppe","text":"Print summary.yppe output","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/print.summary.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the summary.yppe output — print.summary.yppe","text":"","code":"# S3 method for summary.yppe print(x, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/print.summary.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the summary.yppe output — print.summary.yppe","text":"x object class summary.yppe. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/print.summary.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the summary.yppe output — print.summary.yppe","text":"summary fitted model.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic S3 method rates — rates","title":"Generic S3 method rates — rates","text":"Generic S3 method rates","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic S3 method rates — rates","text":"","code":"rates(object, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic S3 method rates — rates","text":"object fitted model object. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic S3 method rates — rates","text":"estimated failure rates PE distribution.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic S3 method rates — rates","text":"Method available ML approach.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.phpe.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimated failure rates for the PE distribution — rates.phpe","title":"Estimated failure rates for the PE distribution — rates.phpe","text":"Estimated failure rates PE distribution","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.phpe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimated failure rates for the PE distribution — rates.phpe","text":"","code":"# S3 method for phpe rates(object, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.phpe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimated failure rates for the PE distribution — rates.phpe","text":"object fitted model object. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.phpe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimated failure rates for the PE distribution — rates.phpe","text":"estimated failure rates PE distribution.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.phpe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimated failure rates for the PE distribution — rates.phpe","text":"Method available ML approach.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.pope.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimated failure rates for the PE distribution — rates.pope","title":"Estimated failure rates for the PE distribution — rates.pope","text":"Estimated failure rates PE distribution","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.pope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimated failure rates for the PE distribution — rates.pope","text":"","code":"# S3 method for pope rates(object, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.pope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimated failure rates for the PE distribution — rates.pope","text":"object fitted model object. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.pope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimated failure rates for the PE distribution — rates.pope","text":"estimated failure rates PE distribution.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.pope.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimated failure rates for the PE distribution — rates.pope","text":"Method available ML approach.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimated failure rates for the PE distribution — rates.yppe","title":"Estimated failure rates for the PE distribution — rates.yppe","text":"Estimated failure rates PE distribution","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimated failure rates for the PE distribution — rates.yppe","text":"","code":"# S3 method for yppe rates(object, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimated failure rates for the PE distribution — rates.yppe","text":"object fitted model object. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimated failure rates for the PE distribution — rates.yppe","text":"estimated failure rates PE distribution.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rates.yppe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimated failure rates for the PE distribution — rates.yppe","text":"Method available ML approach.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rsurv.html","id":null,"dir":"Reference","previous_headings":"","what":"Random generation of survival data — rsurv","title":"Random generation of survival data — rsurv","text":"Function generate random sample survival data.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/rsurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random generation of survival data — rsurv","text":"","code":"rsurv(   formula,   covariates,   baseline = \"weibull\",   gamma,   psi = NULL,   phi = NULL,   max_fu )"},{"path":"https://fndemarqui.github.io/YPPE/reference/rsurv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random generation of survival data — rsurv","text":"formula formula specifying linear predictors covariates data frame containing covariates used generate survival times baseline baseline model (currently Weibull distribution available) gamma baseline parameters psi short-term regression coefficients phi long-term regression coefficients max_fu maximum follow-time","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/summary.phpe.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for the yppe model — summary.phpe","title":"Summary for the yppe model — summary.phpe","text":"Summary yppe model","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/summary.phpe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for the yppe model — summary.phpe","text":"","code":"# S3 method for phpe summary(object, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/summary.phpe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for the yppe model — summary.phpe","text":"object objecto class 'yppe'. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/summary.pope.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for the yppe model — summary.pope","title":"Summary for the yppe model — summary.pope","text":"Summary yppe model","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/summary.pope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for the yppe model — summary.pope","text":"","code":"# S3 method for pope summary(object, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/summary.pope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for the yppe model — summary.pope","text":"object objecto class 'yppe'. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/summary.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for the yppe model — summary.yppe","title":"Summary for the yppe model — summary.yppe","text":"Summary yppe model","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/summary.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for the yppe model — summary.yppe","text":"","code":"# S3 method for yppe summary(object, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/summary.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for the yppe model — summary.yppe","text":"object objecto class 'yppe'. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/survfit.phpe.html","id":null,"dir":"Reference","previous_headings":"","what":"survfit method for phpe models — survfit.phpe","title":"survfit method for phpe models — survfit.phpe","text":"Computes predicted survivor function phpe model.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/survfit.phpe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"survfit method for phpe models — survfit.phpe","text":"","code":"# S3 method for phpe survfit(formula, newdata, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/survfit.phpe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"survfit method for phpe models — survfit.phpe","text":"formula object class phpe newdata data frame containing set explanatory variables. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/survfit.phpe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"survfit method for phpe models — survfit.phpe","text":"list containing estimated survival probabilities.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/survfit.phpe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"survfit method for phpe models — survfit.phpe","text":"","code":"# \\donttest{ # ML approach: library(YPPE) mle <- phpe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"mle\", init = 0) summary(mle) #> Call: #> phpe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"mle\", init = 0) #>  #> Proportional hazards coefficients: #>      Estimate    StdErr z.value   p.value     #> arm -0.310898  0.066011 -4.7098 2.479e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> ---  #> loglik = -2810.835   AIC = 5643.671  ekm <- survival::survfit(Surv(time, status)~arm, data=ipass) newdata <- data.frame(arm=0:1) St <- survfit(mle, newdata) plot(ekm, col=1:2) with(St, lines(time, surv[[1]])) with(St, lines(time, surv[[2]], col=2))   # Bayesian approach: bayes <- phpe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"bayes\") #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000327 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 3.27 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 2.563 seconds (Warm-up) #> Chain 1:                2.214 seconds (Sampling) #> Chain 1:                4.777 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.00033 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 3.3 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 2.452 seconds (Warm-up) #> Chain 2:                2.25 seconds (Sampling) #> Chain 2:                4.702 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.00031 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 3.1 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 2.443 seconds (Warm-up) #> Chain 3:                2.28 seconds (Sampling) #> Chain 3:                4.723 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.000309 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 3.09 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 2.457 seconds (Warm-up) #> Chain 4:                2.362 seconds (Sampling) #> Chain 4:                4.819 seconds (Total) #> Chain 4:  summary(bayes) #> Call: #> phpe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"bayes\") #>  #> Proportional hazards coefficients: #>      mean se_mean    sd   2.5%    25%    50%    75%  97.5%    n_eff Rhat #> arm -0.31   0.001 0.065 -0.439 -0.354 -0.311 -0.267 -0.183 3169.847    1 #> ---  #> Inference for Stan model: yppe. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  ekm <- survival::survfit(Surv(time, status)~arm, data=ipass) newdata <- data.frame(arm=0:1) St <- survfit(bayes, newdata) plot(ekm, col=1:2) with(St, lines(time, surv[[1]])) with(St, lines(time, surv[[2]], col=2))  # }"},{"path":"https://fndemarqui.github.io/YPPE/reference/survfit.pope.html","id":null,"dir":"Reference","previous_headings":"","what":"survfit method for pope models — survfit.pope","title":"survfit method for pope models — survfit.pope","text":"Computes predicted survivor function pope model.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/survfit.pope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"survfit method for pope models — survfit.pope","text":"","code":"# S3 method for pope survfit(formula, newdata, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/survfit.pope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"survfit method for pope models — survfit.pope","text":"formula object class pope newdata data frame containing set explanatory variables. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/survfit.pope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"survfit method for pope models — survfit.pope","text":"list containing estimated survival probabilities.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/survfit.pope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"survfit method for pope models — survfit.pope","text":"","code":"# \\donttest{ # ML approach: library(YPPE) mle <- pope(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"mle\", init = 0) summary(mle) #> Call: #> pope(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"mle\", init = 0) #>  #> Proportional odds coefficients: #>      Estimate    StdErr z.value p.value #> arm -0.051666  0.103113 -0.5011  0.6163 #>  #> ---  #> loglik = -2821.851   AIC = 5665.702  ekm <- survival::survfit(Surv(time, status)~arm, data=ipass) newdata <- data.frame(arm=0:1) St <- survfit(mle, newdata) plot(ekm, col=1:2) with(St, lines(time, surv[[1]])) with(St, lines(time, surv[[2]], col=2))   # Bayesian approach: bayes <- pope(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"bayes\") #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000495 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 4.95 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 3.754 seconds (Warm-up) #> Chain 1:                3.63 seconds (Sampling) #> Chain 1:                7.384 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.000491 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 4.91 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 3.739 seconds (Warm-up) #> Chain 2:                3.574 seconds (Sampling) #> Chain 2:                7.313 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.00047 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 4.7 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 3.689 seconds (Warm-up) #> Chain 3:                3.567 seconds (Sampling) #> Chain 3:                7.256 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.000489 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 4.89 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 3.869 seconds (Warm-up) #> Chain 4:                3.644 seconds (Sampling) #> Chain 4:                7.513 seconds (Total) #> Chain 4:  summary(bayes) #> Call: #> pope(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"bayes\") #>  #> Proportional hazards coefficients: #>      mean se_mean    sd   2.5%    25%   50%   75% 97.5%    n_eff Rhat #> arm -0.05   0.002 0.102 -0.243 -0.119 -0.05 0.019 0.153 4563.277    1 #> ---  #> Inference for Stan model: yppe. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  ekm <- survival::survfit(Surv(time, status)~arm, data=ipass) newdata <- data.frame(arm=0:1) St <- survfit(bayes, newdata) plot(ekm, col=1:2) with(St, lines(time, surv[[1]])) with(St, lines(time, surv[[2]], col=2))  # }"},{"path":"https://fndemarqui.github.io/YPPE/reference/survfit.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"survfit method for yppe models — survfit.yppe","title":"survfit method for yppe models — survfit.yppe","text":"Computes predicted survivor function yppe model.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/survfit.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"survfit method for yppe models — survfit.yppe","text":"","code":"# S3 method for yppe survfit(formula, newdata, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/survfit.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"survfit method for yppe models — survfit.yppe","text":"formula object class yppe newdata data frame containing set explanatory variables. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/survfit.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"survfit method for yppe models — survfit.yppe","text":"list containing estimated survival probabilities.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/survfit.yppe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"survfit method for yppe models — survfit.yppe","text":"","code":"# \\donttest{ # ML approach: library(YPPE) mle <- yppe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"mle\") summary(mle) #> Call: #> yppe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"mle\") #>  #> Short-term coefficients: #>     Estimate  StdErr z.value   p.value     #> arm  1.04164 0.16656  6.2538 4.005e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Long-term coefficients: #>      Estimate    StdErr z.value   p.value     #> arm -1.238480  0.084556 -14.647 < 2.2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> ---  #> loglik = -2759.652   AIC = 5543.305  ekm <- survival::survfit(Surv(time, status)~arm, data=ipass) newdata <- data.frame(arm=0:1) St <- survfit(mle, newdata) plot(ekm, col=1:2) with(St, lines(time, surv[[1]])) with(St, lines(time, surv[[2]], col=2))   # Bayesian approach: bayes <- yppe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"bayes\") #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000828 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.28 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 6.589 seconds (Warm-up) #> Chain 1:                5.665 seconds (Sampling) #> Chain 1:                12.254 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.000781 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 7.81 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 6.682 seconds (Warm-up) #> Chain 2:                5.645 seconds (Sampling) #> Chain 2:                12.327 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.000728 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 7.28 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 6.639 seconds (Warm-up) #> Chain 3:                5.914 seconds (Sampling) #> Chain 3:                12.553 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.000725 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 7.25 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 6.443 seconds (Warm-up) #> Chain 4:                5.859 seconds (Sampling) #> Chain 4:                12.302 seconds (Total) #> Chain 4:  summary(bayes) #> Call: #> yppe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"bayes\") #>  #> Short-term coefficients: #>      mean se_mean    sd  2.5%   25%   50%   75% 97.5%    n_eff Rhat #> arm 1.044   0.003 0.164 0.733 0.928 1.041 1.154 1.374 2860.672    1 #>  #> Long-term coefficients: #>       mean se_mean    sd   2.5%    25%    50%    75% 97.5%    n_eff Rhat #> arm -1.236   0.001 0.083 -1.396 -1.292 -1.236 -1.182 -1.07 3093.555    1 #>  #> ---  #> Inference for Stan model: yppe. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  ekm <- survival::survfit(Surv(time, status)~arm, data=ipass) newdata <- data.frame(arm=0:1) St <- survfit(bayes, newdata) plot(ekm, col=1:2) with(St, lines(time, surv[[1]])) with(St, lines(time, surv[[2]], col=2))  # }"},{"path":"https://fndemarqui.github.io/YPPE/reference/timeGrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Time grid — timeGrid","title":"Time grid — timeGrid","text":"Time grid","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/timeGrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time grid — timeGrid","text":"","code":"timeGrid(time, status, n_int = NULL)"},{"path":"https://fndemarqui.github.io/YPPE/reference/timeGrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time grid — timeGrid","text":"time Vector failure times status Vector failure indicators n_int Optional. Number intervals. NULL, number intervals set equal number distinct observed failure times.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/timeGrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time grid — timeGrid","text":"Time grid.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/vcov.yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance-covariance matrix for a yppe model — vcov.yppe","title":"Variance-covariance matrix for a yppe model — vcov.yppe","text":"function extracts returns variance-covariance matrix associated regression coefficients maximum likelihood estimation approach used model fitting.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/vcov.yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance-covariance matrix for a yppe model — vcov.yppe","text":"","code":"# S3 method for yppe vcov(object, ...)"},{"path":"https://fndemarqui.github.io/YPPE/reference/vcov.yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance-covariance matrix for a yppe model — vcov.yppe","text":"object object class yppe. ... arguments passed methods.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/vcov.yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance-covariance matrix for a yppe model — vcov.yppe","text":"variance-covariance matrix associated regression coefficients.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/yppe.html","id":null,"dir":"Reference","previous_headings":"","what":"yppe: Fit the Yang and Prentice Regression Model with Piecewise Exponential baseline distribution. — yppe","title":"yppe: Fit the Yang and Prentice Regression Model with Piecewise Exponential baseline distribution. — yppe","text":"yppe: Fit Yang Prentice Regression Model Piecewise Exponential baseline distribution.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/yppe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yppe: Fit the Yang and Prentice Regression Model with Piecewise Exponential baseline distribution. — yppe","text":"","code":"yppe(   formula,   data,   n_int = NULL,   rho = NULL,   tau = NULL,   hessian = TRUE,   approach = c(\"mle\", \"bayes\"),   hyper_parms = list(h1_gamma = 0, h2_gamma = 4, mu_psi = 0, sigma_psi = 4, mu_phi = 0,     sigma_phi = 4, mu_beta = 0, sigma_beta = 4),   ... )"},{"path":"https://fndemarqui.github.io/YPPE/reference/yppe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"yppe: Fit the Yang and Prentice Regression Model with Piecewise Exponential baseline distribution. — yppe","text":"formula object class \"formula\" (one can coerced class): symbolic description model fitted. data optional data frame, list environment (object coercible .data.frame data frame) containing variables model. found data, variables taken environment(formula), typically environment yppe called. n_int number intervals PE distribution. NULL, default value (square root n) used. rho time grid PE distribution. NULL, function timeGrid used compute rho. tau maximum time follow-. NULL, tau = max(time), time vector observed survival times. hessian logical; TRUE (default), hessian matrix returned approach=\"mle\". approach approach used fit model (mle: maximum likelihood; bayes: Bayesian approach). hyper_parms list containing hyper-parameters prior distributions (approach = \"bayes\"). specified, default values used. ... Arguments passed either `rstan::optimizing` `rstan::sampling` .","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/yppe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"yppe: Fit the Yang and Prentice Regression Model with Piecewise Exponential baseline distribution. — yppe","text":"yppe returns object class \"yppe\" containing fitted model.","code":""},{"path":"https://fndemarqui.github.io/YPPE/reference/yppe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"yppe: Fit the Yang and Prentice Regression Model with Piecewise Exponential baseline distribution. — yppe","text":"","code":"# \\donttest{ # ML approach: library(YPPE) mle <- yppe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"mle\") summary(mle) #> Call: #> yppe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"mle\") #>  #> Short-term coefficients: #>     Estimate  StdErr z.value   p.value     #> arm  1.04170 0.16656  6.2541 3.997e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Long-term coefficients: #>      Estimate    StdErr z.value   p.value     #> arm -1.238516  0.084555 -14.648 < 2.2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> ---  #> loglik = -2759.652   AIC = 5543.305   # Bayesian approach: bayes <- yppe(Surv(time, status)~arm, data=ipass, n_int=10, approach=\"bayes\") #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000726 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 7.26 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 6.721 seconds (Warm-up) #> Chain 1:                5.941 seconds (Sampling) #> Chain 1:                12.662 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.000703 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 7.03 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 6.36 seconds (Warm-up) #> Chain 2:                5.728 seconds (Sampling) #> Chain 2:                12.088 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.000712 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 7.12 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 6.71 seconds (Warm-up) #> Chain 3:                5.97 seconds (Sampling) #> Chain 3:                12.68 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'yppe' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.000732 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 7.32 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 6.908 seconds (Warm-up) #> Chain 4:                6.151 seconds (Sampling) #> Chain 4:                13.059 seconds (Total) #> Chain 4:  summary(bayes) #> Call: #> yppe(formula = Surv(time, status) ~ arm, data = ipass, n_int = 10,  #>     approach = \"bayes\") #>  #> Short-term coefficients: #>      mean se_mean    sd  2.5%   25%   50%   75% 97.5%    n_eff Rhat #> arm 1.039   0.003 0.166 0.722 0.926 1.036 1.151 1.373 2734.998    1 #>  #> Long-term coefficients: #>       mean se_mean    sd 2.5%   25%    50%    75%  97.5%    n_eff Rhat #> arm -1.234   0.002 0.084 -1.4 -1.29 -1.233 -1.178 -1.071 2967.796    1 #>  #> ---  #> Inference for Stan model: yppe. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  # }"},{"path":"https://fndemarqui.github.io/YPPE/news/index.html","id":"yppe-version-110","dir":"Changelog","previous_headings":"","what":"YPPE Version 1.1.0","title":"YPPE Version 1.1.0","text":"survit function returns now list containing two objects: time surv associated observed survival times corresponding survival probabilities. inclusion model.matrix method implementation phpe() phpo() functions fit proportional hazards (PH) proportional odds (PO) models. implementation anova.yppe() function carry likelihood ratio tests. implemantation AIC.yppe() function compute AIC (Akaike information criterion). implemantation logLik.yppe() function extract log-likelihood value fitted model. YPPE package now requires rstan Version 2.26. update package reference.","code":""},{"path":"https://fndemarqui.github.io/YPPE/news/index.html","id":"yppe-version-101","dir":"Changelog","previous_headings":"","what":"YPPE version 1.0.1","title":"YPPE version 1.0.1","text":"CRAN release: 2020-01-09 coef() function extract regression coefficientes MLE approach vcov() function compute variance-covariance matrix associated regression coefficients MLE approach confint() function compute 100(1-alpha)% confidence intervals MLE approahc bug fix: yppe() function now works properly number intervals time grid (n_int rho) passed arguments; default time grid now computed using distinct observed failure times endpoints intervals","code":""}]
